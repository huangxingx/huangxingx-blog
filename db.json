{"meta":{"version":1,"warehouse":"2.2.0"},"models":{"Asset":[{"_id":"themes/3-hexo/source/css/gitalk.css","path":"css/gitalk.css","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/mobile.styl","path":"css/mobile.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/img/404.jpg","path":"img/404.jpg","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/img/alipay.jpg","path":"img/alipay.jpg","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/img/avatar.jpg","path":"img/avatar.jpg","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/img/brown-papersq.png","path":"img/brown-papersq.png","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/img/school-book.png","path":"img/school-book.png","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/js/iconfont.js","path":"js/iconfont.js","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/js/jquery.autocomplete.min.js","path":"js/jquery.autocomplete.min.js","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/js/search.js","path":"js/search.js","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/img/weixin.jpg","path":"img/weixin.jpg","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/icomoon.eot","path":"css/fonts/icomoon.eot","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/icomoon.svg","path":"css/fonts/icomoon.svg","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/icomoon.ttf","path":"css/fonts/icomoon.ttf","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/icomoon.woff","path":"css/fonts/icomoon.woff","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/iconfont.eot","path":"css/fonts/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/iconfont.svg","path":"css/fonts/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/iconfont.ttf","path":"css/fonts/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/iconfont.woff","path":"css/fonts/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/fonts/selection.json","path":"css/fonts/selection.json","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/atom-dark.styl","path":"css/hl_theme/atom-dark.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/atom-light.styl","path":"css/hl_theme/atom-light.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/brown-paper.styl","path":"css/hl_theme/brown-paper.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/darcula.styl","path":"css/hl_theme/darcula.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/github-gist.styl","path":"css/hl_theme/github-gist.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/github.styl","path":"css/hl_theme/github.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/gruvbox-dark.styl","path":"css/hl_theme/gruvbox-dark.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/gruvbox-light.styl","path":"css/hl_theme/gruvbox-light.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/kimbie-dark.styl","path":"css/hl_theme/kimbie-dark.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/kimbie-light.styl","path":"css/hl_theme/kimbie-light.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/railscasts.styl","path":"css/hl_theme/railscasts.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/rainbow.styl","path":"css/hl_theme/rainbow.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/school-book.styl","path":"css/hl_theme/school-book.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/sublime.styl","path":"css/hl_theme/sublime.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/sunburst.styl","path":"css/hl_theme/sunburst.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/css/hl_theme/zenbum.styl","path":"css/hl_theme/zenbum.styl","modified":0,"renderable":1},{"_id":"themes/3-hexo/source/js/gitalk.js","path":"js/gitalk.js","modified":0,"renderable":1}],"Cache":[{"_id":"themes/3-hexo/.DS_Store","hash":"0770f9d42bfdd8d420de48fed463015e001cf579","modified":1559643113631},{"_id":"themes/3-hexo/.gitignore","hash":"5e85fe97e87211619c1db29fd3f3b0dbf16be4a7","modified":1559643113631},{"_id":"themes/3-hexo/README.md","hash":"c8bc4f2579d93a0ee8ee933e5da93af96ede4444","modified":1559643113631},{"_id":"themes/3-hexo/_config.yml","hash":"1bdc584637a3b7e09ced321768b917c054532f64","modified":1560243805706},{"_id":"source/_posts/amqp-instraction.md","hash":"7c8fd4633f447016390ca25bd854eaf12413b9fc","modified":1559709736392},{"_id":"source/_posts/doc-href.md","hash":"55b47fa4b58720fb81db4eb0c8a6dd351253aea9","modified":1559716975789},{"_id":"source/_posts/go-future.md","hash":"10e0bbb95c09b8e1d4cf13f8e0052d568a4d6633","modified":1559805880831},{"_id":"source/_posts/go-micro-precautions.md","hash":"7b00691b5ac0871a30a7c93282b936e60fbb12ca","modified":1573015163385},{"_id":"source/_posts/go-生成随机字符串.md","hash":"ef641ca11d210d0344deef374c22fd162f29119c","modified":1560411762686},{"_id":"source/_posts/go-生成随机验证码.md","hash":"036b38c3efb7e8493bb53469cb9ac1af7a83d257","modified":1561434712612},{"_id":"source/_posts/gorm-mysql-json.md","hash":"01ff99bc7b30e07d5f97e9cd0a0d3623e8e6959f","modified":1560243567114},{"_id":"source/_posts/http-status-code.md","hash":"d2e403daec6f6bea074fe59dfff91f280f17f9e6","modified":1559709483756},{"_id":"source/_posts/markdown.md","hash":"ebbcac22fa99ad90e29e3a91a66d645b0948268e","modified":1559709513760},{"_id":"source/_posts/mysql距离函数st-distance.md","hash":"ffddb037bb6a6f64ca9cb916671a552254d0f87f","modified":1560326434908},{"_id":"source/_posts/python-re.md","hash":"8c241f4ab30a8bf019b7052c78b1baa73d4e277e","modified":1559709474744},{"_id":"source/_posts/rabbitmq-manager.md","hash":"611870efb3381fc21de661eb47ee403a4d1c0100","modified":1559709574536},{"_id":"themes/3-hexo/.git/HEAD","hash":"acbaef275e46a7f14c1ef456fff2c8bbe8c84724","modified":1559643113627},{"_id":"themes/3-hexo/.git/config","hash":"db62a92d33f263b1b971018bb60c843cbe173199","modified":1559643113627},{"_id":"themes/3-hexo/.git/description","hash":"9635f1b7e12c045212819dd934d809ef07efa2f4","modified":1559642912431},{"_id":"themes/3-hexo/.git/index","hash":"88c391c06cd28284c3d1f9146e7213233705fa5d","modified":1559643789755},{"_id":"themes/3-hexo/.git/packed-refs","hash":"33f030fb7fb5dd0c4ce7cfa436ce8e3667159c3a","modified":1559643113627},{"_id":"themes/3-hexo/layout/index.ejs","hash":"56fc95610a240e8bfe3d5b611896a819c1eb5dee","modified":1559643113631},{"_id":"themes/3-hexo/layout/indexs.md","hash":"01f02cb5cfb3e6dc5da525ce2e4936995fe6f9a4","modified":1559644511039},{"_id":"themes/3-hexo/layout/post.ejs","hash":"810f046277fc49f523a72d1552eab1e39d3c299c","modified":1559643113631},{"_id":"themes/3-hexo/source/.DS_Store","hash":"fdcc907c46e093a14b153c5dc8c038461997ed3c","modified":1559643113631},{"_id":"themes/3-hexo/.git/hooks/applypatch-msg.sample","hash":"86b9655a9ebbde13ac8dd5795eb4d5b539edab0f","modified":1559642912431},{"_id":"themes/3-hexo/.git/hooks/commit-msg.sample","hash":"ee1ed5aad98a435f2020b6de35c173b75d9affac","modified":1559642912431},{"_id":"themes/3-hexo/.git/hooks/post-update.sample","hash":"b614c2f63da7dca9f1db2e7ade61ef30448fc96c","modified":1559642912431},{"_id":"themes/3-hexo/.git/hooks/pre-applypatch.sample","hash":"42fa41564917b44183a50c4d94bb03e1768ddad8","modified":1559642912431},{"_id":"themes/3-hexo/.git/hooks/pre-commit.sample","hash":"36aed8976dcc08b5076844f0ec645b18bc37758f","modified":1559642912431},{"_id":"themes/3-hexo/.git/hooks/pre-push.sample","hash":"b4ad74c989616b7395dc6c9fce9871bb1e86dfb5","modified":1559642912431},{"_id":"themes/3-hexo/.git/hooks/pre-rebase.sample","hash":"18be3eb275c1decd3614e139f5a311b75f1b0ab8","modified":1559642912431},{"_id":"themes/3-hexo/.git/hooks/prepare-commit-msg.sample","hash":"2b6275eda365cad50d167fe3a387c9bc9fedd54f","modified":1559642912431},{"_id":"themes/3-hexo/.git/hooks/update.sample","hash":"39355a075977d05708ef74e1b66d09a36e486df1","modified":1559642912431},{"_id":"themes/3-hexo/.git/info/exclude","hash":"c879df015d97615050afa7b9641e3352a1e701ac","modified":1559642912431},{"_id":"themes/3-hexo/.git/logs/HEAD","hash":"ce159b0190a85677c61cc0434fc82dbcf34fa221","modified":1559643113627},{"_id":"themes/3-hexo/layout/_partial/article.ejs","hash":"5a81f9959cdf3bd44f5bef515ad284c69630b7c5","modified":1559643113631},{"_id":"themes/3-hexo/layout/_partial/article_copyright.ejs","hash":"c91874db923a0a38ee1c55427f1a19e7f03953a1","modified":1559643377871},{"_id":"themes/3-hexo/layout/_partial/comment.ejs","hash":"5507b4dfab2032345e012a0c5356f63b01395157","modified":1559643113631},{"_id":"themes/3-hexo/layout/_partial/copyright.ejs","hash":"d209ddcfd0149760a30837076be345a09e1797c5","modified":1559643113631},{"_id":"themes/3-hexo/layout/_partial/dashang.ejs","hash":"266e4b638b71892fdca1f5870e8f2e5d695e0958","modified":1559643113631},{"_id":"themes/3-hexo/layout/_partial/footer.ejs","hash":"1f63de1727b533f300ef3f4c745187a6eea16f5f","modified":1559643113631},{"_id":"themes/3-hexo/layout/_partial/friends.ejs","hash":"7a31274da81c076021692ff7c80a1be3bbf6fa4c","modified":1559643113631},{"_id":"themes/3-hexo/layout/_partial/full-toc.ejs","hash":"7e6c50b6c24de864e0d6a106e6a8e423e312454a","modified":1559643113631},{"_id":"themes/3-hexo/layout/_partial/header.ejs","hash":"30c3ab5847a18db678ffbe3fc6309ec96cb010c0","modified":1559643113631},{"_id":"themes/3-hexo/layout/_partial/mathjax.ejs","hash":"c2e5cef2377884cd79e5f686fe4f74b082744306","modified":1559643113631},{"_id":"themes/3-hexo/layout/_partial/meta.ejs","hash":"4f7e00e37783208cb350842085f1987ee854452e","modified":1559643113631},{"_id":"themes/3-hexo/layout/_partial/nav-left.ejs","hash":"53cc6112b8b85d7522febde800b1ad854de62cee","modified":1559643113631},{"_id":"themes/3-hexo/layout/_partial/nav-right.ejs","hash":"301837aa3787004f069206440be25db32e3fb087","modified":1559643113631},{"_id":"themes/3-hexo/layout/_partial/tag.ejs","hash":"da40cb48b6b1f24cbd7107f7c97b04f063e9c299","modified":1559643113631},{"_id":"themes/3-hexo/layout/_partial/toc-ref.ejs","hash":"6406251dabda66ef686d4c15edbc3061b6d828b8","modified":1559643113631},{"_id":"themes/3-hexo/source/css/gitalk.css","hash":"58177ce227c50ee359fbf99a4fdd26058887afc5","modified":1559643113635},{"_id":"themes/3-hexo/source/css/mobile.styl","hash":"83e5569a58663f9322dda64d263a80153790ad68","modified":1559643113635},{"_id":"themes/3-hexo/source/css/style.styl","hash":"c7285882370f522c3bb17055cdf615cf92f48cd0","modified":1559643113635},{"_id":"themes/3-hexo/source/img/404.jpg","hash":"cc673d0fa1e974159965afc452a1c8316da60086","modified":1559643491000},{"_id":"themes/3-hexo/source/img/alipay.jpg","hash":"e457d1d3dfefbbd824d154cf756a2c6d10b812a2","modified":1559643113635},{"_id":"themes/3-hexo/source/img/avatar.jpg","hash":"a42360089bfa892d803cf5747eab359d90f337f1","modified":1559643113635},{"_id":"themes/3-hexo/source/img/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1559643113635},{"_id":"themes/3-hexo/source/img/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1559643113635},{"_id":"themes/3-hexo/source/js/iconfont.js","hash":"3df68e0aacdb930246103226f779bda9202d00d8","modified":1559643113635},{"_id":"themes/3-hexo/source/js/jquery.autocomplete.min.js","hash":"7b8ac4d06c9e763963832529f44a56ad42a81e5f","modified":1559643113635},{"_id":"themes/3-hexo/source/js/script.js","hash":"7502191e29366a11323dc72ae365b1aed254e6f2","modified":1559643113635},{"_id":"themes/3-hexo/source/js/search.js","hash":"c80c9a231ee040c7adc07a477793873fb85ce8bc","modified":1559643113635},{"_id":"themes/3-hexo/source/img/weixin.jpg","hash":"8dafb22561698d0758fba9ea2a45abf6ad3512a2","modified":1559643113635},{"_id":"themes/3-hexo/.git/objects/3e/fd3e7b49be00e24fd84111a79705554f57b035","hash":"ab4cb44d7d0e638aa150a7e4868e1b254ec0b405","modified":1559643789751},{"_id":"themes/3-hexo/.git/objects/pack/pack-9d01c5e242df358524db079a1117309bb24009dd.idx","hash":"eb7c2422d03355a8cc0615671793c52445ec0b3e","modified":1559643113539},{"_id":"themes/3-hexo/.git/refs/heads/master","hash":"245d57c5d033be31cb7cf9c3ea11a8e00a054327","modified":1559643113627},{"_id":"themes/3-hexo/layout/_partial/comments/click2show.ejs","hash":"359f73329b9821f3ca3554d306a04d6766110a5a","modified":1559643113631},{"_id":"themes/3-hexo/layout/_partial/comments/disqus.ejs","hash":"cd0022ce7e6d6efb07a00e87477cdf791f7f6703","modified":1559643113631},{"_id":"themes/3-hexo/layout/_partial/comments/gentie.ejs","hash":"1d6eacdadeb247e3b349ca7168f797beae8ff4c5","modified":1559643113631},{"_id":"themes/3-hexo/layout/_partial/comments/gitalk.ejs","hash":"1408fcdf3597b9c17b22359f95fa6b11f0405894","modified":1559643113631},{"_id":"themes/3-hexo/layout/_partial/comments/gitment.ejs","hash":"40eec9ad4dd12279547c281287ac34113855fec7","modified":1559643113631},{"_id":"themes/3-hexo/source/css/_partial/autocomplete.styl","hash":"f6847a2c6d35dbd6d06dc591bd34ed2019784048","modified":1559643113631},{"_id":"themes/3-hexo/source/css/_partial/comment.styl","hash":"cc0a862b31359a85d12579e49d2eca58d128275c","modified":1559643113631},{"_id":"themes/3-hexo/source/css/_partial/dashang.styl","hash":"f6447a2ac407228e1d53e3455db2919ac0e9f094","modified":1559643113631},{"_id":"themes/3-hexo/source/css/_partial/fade.styl","hash":"4f687cbc74caf8a0887f5e89250284a9bce8b5c1","modified":1559643113631},{"_id":"themes/3-hexo/source/css/_partial/font.styl","hash":"8cb83271739dad610d4ca3516e947672eeff98c7","modified":1559643113631},{"_id":"themes/3-hexo/source/css/_partial/full-toc.styl","hash":"0ba318911afbbbffbd2473b472aedf2d3900e978","modified":1559643113631},{"_id":"themes/3-hexo/source/css/_partial/nav-left.styl","hash":"5dcc8a7d3b3d15bc16632b74b7b84b9364a37b80","modified":1559643113631},{"_id":"themes/3-hexo/source/css/_partial/nav-right.styl","hash":"61a0d3c771af70947aa6d317d204a377552bf73d","modified":1559643113631},{"_id":"themes/3-hexo/source/css/_partial/nprogress.styl","hash":"65efbddd23a264e7d1e85f4073228526770e833c","modified":1559643113631},{"_id":"themes/3-hexo/source/css/_partial/num-load.styl","hash":"4b996440bba8ec755aa70bc6d074d7dbba55ec0c","modified":1559643113631},{"_id":"themes/3-hexo/source/css/_partial/post.styl","hash":"0a444c43ca59932cfbe6a985dba528e7a550afa3","modified":1559643113631},{"_id":"themes/3-hexo/source/css/fonts/icomoon.eot","hash":"b6195bedc1cb2f9cfcb26cc27021f2e94be2ab0a","modified":1559643113635},{"_id":"themes/3-hexo/source/css/fonts/icomoon.svg","hash":"37ac1ef28b03f46bf3ad2606c86f0e1ec3e4405f","modified":1559643113635},{"_id":"themes/3-hexo/source/css/fonts/icomoon.ttf","hash":"eb976d8b8559fcddfc2658a03a4350cb566fc06b","modified":1559643113635},{"_id":"themes/3-hexo/source/css/fonts/icomoon.woff","hash":"3985d29416bb9b19f50a2f20f2bbbce47f10af8d","modified":1559643113635},{"_id":"themes/3-hexo/source/css/fonts/iconfont.eot","hash":"39bdc1485b82767779059f4c12ea9278e46240f4","modified":1559643113635},{"_id":"themes/3-hexo/source/css/fonts/iconfont.svg","hash":"6c4873a22ac801674139e01ef12b4540e2a01819","modified":1559643113635},{"_id":"themes/3-hexo/source/css/fonts/iconfont.ttf","hash":"8d31ceb847fd15e03be64040216fadd39f6151e7","modified":1559643113635},{"_id":"themes/3-hexo/source/css/fonts/iconfont.woff","hash":"82d6f4f15462a2be28f33dfd6db8e4ca63dae8f9","modified":1559643113635},{"_id":"themes/3-hexo/source/css/fonts/selection.json","hash":"57c7f100019d57b512aab509185cb0a6eb9aa4c8","modified":1559643113635},{"_id":"themes/3-hexo/source/css/hl_theme/atom-dark.styl","hash":"f3eb4e5feda9cbd6242ccf44ca064e2979b5d719","modified":1559643113635},{"_id":"themes/3-hexo/source/css/hl_theme/atom-light.styl","hash":"69d184a682bcaeba2b180b437dc4431bc3be38aa","modified":1559643113635},{"_id":"themes/3-hexo/source/css/hl_theme/brown-paper.styl","hash":"03af387edcc1cf8c18d12e9c440fd51b6cf425b6","modified":1559643113635},{"_id":"themes/3-hexo/source/css/hl_theme/darcula.styl","hash":"2bfc14f27ccca108b4b3755782de8366e8bd001e","modified":1559643113635},{"_id":"themes/3-hexo/source/css/hl_theme/github-gist.styl","hash":"5e05b19832c1099bd9d284bc3ed00dc8a3d7ee23","modified":1559643113635},{"_id":"themes/3-hexo/source/css/hl_theme/github.styl","hash":"53276ff1f224f691dfe811e82c0af7f4476abf5d","modified":1559643113635},{"_id":"themes/3-hexo/source/css/hl_theme/gruvbox-dark.styl","hash":"315ad610d303caba9eac80a7d51002193a15478a","modified":1559643113635},{"_id":"themes/3-hexo/source/css/hl_theme/gruvbox-light.styl","hash":"1bece084b1dbbbd4af064f05feffd8c332b96a48","modified":1559643113635},{"_id":"themes/3-hexo/source/css/hl_theme/kimbie-dark.styl","hash":"e9c190f9ffc37a13cac430512e4e0c760205be4a","modified":1559643113635},{"_id":"themes/3-hexo/source/css/hl_theme/kimbie-light.styl","hash":"0c3ccd0d64e7504c7061d246dc32737f502f64e4","modified":1559643113635},{"_id":"themes/3-hexo/source/css/hl_theme/railscasts.styl","hash":"a6e8cfd2202afd7893f5268f3437421e35066e7b","modified":1559643113635},{"_id":"themes/3-hexo/source/css/hl_theme/rainbow.styl","hash":"e5c37646a9d9c1094f9aab7a7c65a4b242e8db00","modified":1559643113635},{"_id":"themes/3-hexo/source/css/hl_theme/school-book.styl","hash":"51659351b391a2be5c68728bb51b7ad467c5e0db","modified":1559643113635},{"_id":"themes/3-hexo/source/css/hl_theme/sublime.styl","hash":"501d75ef0f4385bea24d9b9b4cc434ba68d4be27","modified":1559643113635},{"_id":"themes/3-hexo/source/css/hl_theme/sunburst.styl","hash":"2aa9817e68fb2ed216781ea04b733039ebe18214","modified":1559643113635},{"_id":"themes/3-hexo/source/css/hl_theme/zenbum.styl","hash":"933a3b196d01254dea5e6f48105ea15e210ae000","modified":1559643113635},{"_id":"themes/3-hexo/source/js/gitalk.js","hash":"d1eb82a3280981bd652d9a8e323060e4311c547b","modified":1559643113635},{"_id":"themes/3-hexo/.git/logs/refs/heads/master","hash":"ce159b0190a85677c61cc0434fc82dbcf34fa221","modified":1559643113627},{"_id":"themes/3-hexo/.git/refs/remotes/origin/HEAD","hash":"d9427cda09aba1cdde5c69c2b13c905bddb0bc51","modified":1559643113627},{"_id":"themes/3-hexo/.git/logs/refs/remotes/origin/HEAD","hash":"ce159b0190a85677c61cc0434fc82dbcf34fa221","modified":1559643113627},{"_id":"themes/3-hexo/.git/objects/pack/pack-9d01c5e242df358524db079a1117309bb24009dd.pack","hash":"2b17f464d077189d9c4a5a3ec3c029c823cf8288","modified":1559643113539},{"_id":"public/content.json","hash":"23abf31f917053b017c48518f900b0103c92849d","modified":1588909679301},{"_id":"public/archives/index.html","hash":"a6baeae80600e35389df7d136405226a8d1c9743","modified":1588909679335},{"_id":"public/archives/page/2/index.html","hash":"a6baeae80600e35389df7d136405226a8d1c9743","modified":1588909679335},{"_id":"public/archives/2017/index.html","hash":"a6baeae80600e35389df7d136405226a8d1c9743","modified":1588909679335},{"_id":"public/archives/2017/11/index.html","hash":"a6baeae80600e35389df7d136405226a8d1c9743","modified":1588909679336},{"_id":"public/archives/2018/index.html","hash":"a6baeae80600e35389df7d136405226a8d1c9743","modified":1588909679335},{"_id":"public/archives/2018/04/index.html","hash":"a6baeae80600e35389df7d136405226a8d1c9743","modified":1588909679336},{"_id":"public/archives/2018/07/index.html","hash":"a6baeae80600e35389df7d136405226a8d1c9743","modified":1588909679336},{"_id":"public/archives/2019/index.html","hash":"a6baeae80600e35389df7d136405226a8d1c9743","modified":1588909679336},{"_id":"public/archives/2019/06/index.html","hash":"a6baeae80600e35389df7d136405226a8d1c9743","modified":1588909679336},{"_id":"public/archives/2019/11/index.html","hash":"a6baeae80600e35389df7d136405226a8d1c9743","modified":1588909679336},{"_id":"public/categories/rabbitmq/index.html","hash":"a6baeae80600e35389df7d136405226a8d1c9743","modified":1588909679337},{"_id":"public/categories/docs/index.html","hash":"a6baeae80600e35389df7d136405226a8d1c9743","modified":1588909679337},{"_id":"public/categories/go/index.html","hash":"a6baeae80600e35389df7d136405226a8d1c9743","modified":1588909679337},{"_id":"public/categories/http/index.html","hash":"a6baeae80600e35389df7d136405226a8d1c9743","modified":1588909679337},{"_id":"public/categories/mysql/index.html","hash":"a6baeae80600e35389df7d136405226a8d1c9743","modified":1588909679337},{"_id":"public/categories/python/index.html","hash":"a6baeae80600e35389df7d136405226a8d1c9743","modified":1588909679337},{"_id":"public/tags/rabbitmq/index.html","hash":"a6baeae80600e35389df7d136405226a8d1c9743","modified":1588909679337},{"_id":"public/tags/docs/index.html","hash":"a6baeae80600e35389df7d136405226a8d1c9743","modified":1588909679337},{"_id":"public/tags/go/index.html","hash":"a6baeae80600e35389df7d136405226a8d1c9743","modified":1588909679337},{"_id":"public/tags/golang/index.html","hash":"a6baeae80600e35389df7d136405226a8d1c9743","modified":1588909679337},{"_id":"public/tags/go-micro/index.html","hash":"a6baeae80600e35389df7d136405226a8d1c9743","modified":1588909679337},{"_id":"public/tags/注意事项/index.html","hash":"a6baeae80600e35389df7d136405226a8d1c9743","modified":1588909679337},{"_id":"public/tags/http/index.html","hash":"a6baeae80600e35389df7d136405226a8d1c9743","modified":1588909679337},{"_id":"public/tags/web/index.html","hash":"a6baeae80600e35389df7d136405226a8d1c9743","modified":1588909679337},{"_id":"public/tags/markdown/index.html","hash":"a6baeae80600e35389df7d136405226a8d1c9743","modified":1588909679337},{"_id":"public/tags/mysql/index.html","hash":"a6baeae80600e35389df7d136405226a8d1c9743","modified":1588909679337},{"_id":"public/tags/re/index.html","hash":"a6baeae80600e35389df7d136405226a8d1c9743","modified":1588909679337},{"_id":"public/tags/python/index.html","hash":"a6baeae80600e35389df7d136405226a8d1c9743","modified":1588909679337},{"_id":"public/tags/amqp/index.html","hash":"a6baeae80600e35389df7d136405226a8d1c9743","modified":1588909679337},{"_id":"public/tags/queue/index.html","hash":"a6baeae80600e35389df7d136405226a8d1c9743","modified":1588909679337},{"_id":"public/index.html","hash":"a6baeae80600e35389df7d136405226a8d1c9743","modified":1588909679337},{"_id":"public/page/2/index.html","hash":"a6baeae80600e35389df7d136405226a8d1c9743","modified":1588909679337},{"_id":"public/2019/11/05/go-micro-precautions/index.html","hash":"b6abf855e9a33f22c2d4b634397876f4c12bc2d3","modified":1588909679333},{"_id":"public/2019/06/25/go-生成随机验证码/index.html","hash":"bcffd3b61fa7920f36a9e47657adac351f01cc1b","modified":1588909679334},{"_id":"public/2019/06/13/go-生成随机字符串/index.html","hash":"203b53c39ad84603ee4086d832c9521229a421cc","modified":1588909679334},{"_id":"public/2019/06/12/mysql距离函数st-distance/index.html","hash":"ecb66f87f5e88a9dceb15737b9353ec895abaada","modified":1588909679334},{"_id":"public/2019/06/11/gorm-mysql-json/index.html","hash":"e2318f9a44563067886613a8d9540e8f65de2084","modified":1588909679334},{"_id":"public/2019/06/06/go-future/index.html","hash":"51e9bccc4b5d9af0beff048b000309ce9b18bd3d","modified":1588909679334},{"_id":"public/2019/06/05/markdown/index.html","hash":"1e422985d6bef884fe94c3095842da5695ff5b54","modified":1588909679334},{"_id":"public/2019/06/04/doc-href/index.html","hash":"4dac9ebda0af8e097a2c65303aeaff8a8fee7e5c","modified":1588909679334},{"_id":"public/2018/07/16/amqp-instraction/index.html","hash":"a1d6db68cdec1247833124d53e8988384d607bc0","modified":1588909679334},{"_id":"public/2018/04/18/http-status-code/index.html","hash":"92602643d45977c638d9efb44f05b726f7eebe26","modified":1588909679334},{"_id":"public/2017/11/13/python-re/index.html","hash":"71524f4f5eae900c68acb03a49343e0610f04293","modified":1588909679335},{"_id":"public/2017/11/13/rabbitmq-manager/index.html","hash":"e0804c87d449fad98bf3feee49bd3429d2b6ea0c","modified":1588909679335},{"_id":"public/img/404.jpg","hash":"cc673d0fa1e974159965afc452a1c8316da60086","modified":1573015175810},{"_id":"public/img/alipay.jpg","hash":"e457d1d3dfefbbd824d154cf756a2c6d10b812a2","modified":1573015175810},{"_id":"public/img/avatar.jpg","hash":"a42360089bfa892d803cf5747eab359d90f337f1","modified":1573015175810},{"_id":"public/img/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1573015175810},{"_id":"public/img/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1573015175810},{"_id":"public/css/fonts/icomoon.ttf","hash":"eb976d8b8559fcddfc2658a03a4350cb566fc06b","modified":1573015175810},{"_id":"public/css/fonts/icomoon.eot","hash":"b6195bedc1cb2f9cfcb26cc27021f2e94be2ab0a","modified":1573015175810},{"_id":"public/css/fonts/icomoon.svg","hash":"37ac1ef28b03f46bf3ad2606c86f0e1ec3e4405f","modified":1573015175810},{"_id":"public/css/fonts/icomoon.woff","hash":"3985d29416bb9b19f50a2f20f2bbbce47f10af8d","modified":1573015175810},{"_id":"public/css/fonts/iconfont.eot","hash":"39bdc1485b82767779059f4c12ea9278e46240f4","modified":1573015175810},{"_id":"public/css/fonts/iconfont.ttf","hash":"8d31ceb847fd15e03be64040216fadd39f6151e7","modified":1573015175810},{"_id":"public/css/fonts/iconfont.svg","hash":"6c4873a22ac801674139e01ef12b4540e2a01819","modified":1573015175810},{"_id":"public/css/fonts/iconfont.woff","hash":"82d6f4f15462a2be28f33dfd6db8e4ca63dae8f9","modified":1573015175810},{"_id":"public/img/weixin.jpg","hash":"8dafb22561698d0758fba9ea2a45abf6ad3512a2","modified":1573015176598},{"_id":"public/css/mobile.css","hash":"102f04bcf1923b67882e1bb545ae6f331c1ce7cd","modified":1573015176608},{"_id":"public/js/jquery.autocomplete.min.js","hash":"7b8ac4d06c9e763963832529f44a56ad42a81e5f","modified":1573015176608},{"_id":"public/js/search.js","hash":"c80c9a231ee040c7adc07a477793873fb85ce8bc","modified":1573015176609},{"_id":"public/css/hl_theme/atom-dark.css","hash":"88d11052a24e8100af6248eb4dbe1ce7b0e96408","modified":1573015176609},{"_id":"public/css/hl_theme/atom-light.css","hash":"a3c8f3ee9a655594eff7ac545cb2e6914c1abcc2","modified":1573015176609},{"_id":"public/css/hl_theme/brown-paper.css","hash":"500c8e750373f6656ff49a7857c871ceedcf8777","modified":1573015176609},{"_id":"public/css/hl_theme/darcula.css","hash":"4341074bae4bc9f0b86e32b623e27babc0159b6e","modified":1573015176609},{"_id":"public/css/hl_theme/github-gist.css","hash":"7a41c1c479d09df875f99f1f6d94aac42e9e2ad0","modified":1573015176609},{"_id":"public/css/hl_theme/github.css","hash":"e05a0806a508a26b9f3f3794b6b588ec6504ad3f","modified":1573015176609},{"_id":"public/css/hl_theme/gruvbox-dark.css","hash":"8c440d9b4ee19ac03eaee3c6af78ba52e5ba5535","modified":1573015176609},{"_id":"public/css/hl_theme/gruvbox-light.css","hash":"30514aaa242a34647aa666cfca4fc74c595ea8f2","modified":1573015176609},{"_id":"public/css/hl_theme/kimbie-dark.css","hash":"728527fcc308da454722c119b89e6da3025bd1e3","modified":1573015176609},{"_id":"public/css/hl_theme/kimbie-light.css","hash":"0c61926c989163faefb031d27bce3e287d6e10f2","modified":1573015176609},{"_id":"public/css/hl_theme/railscasts.css","hash":"511f2fd2a84d426e5da5cb17880cc08f73beb002","modified":1573015176609},{"_id":"public/css/hl_theme/school-book.css","hash":"ffbbcd13a74ac2404262c50b7a43053dfd0096ff","modified":1573015176609},{"_id":"public/css/hl_theme/rainbow.css","hash":"7ff4251938076ddb7e4e49413db82653e5b61321","modified":1573015176609},{"_id":"public/css/hl_theme/sublime.css","hash":"f65c5b116d9213afb9c324384a2f3bc86cb71121","modified":1573015176609},{"_id":"public/css/hl_theme/sunburst.css","hash":"8a135abac1512cf430d1d1ad2304b79afa1a4d6e","modified":1573015176609},{"_id":"public/css/hl_theme/zenbum.css","hash":"0a78f74a93568e20b32ca7427c719e9bae9a0b55","modified":1573015176609},{"_id":"public/css/style.css","hash":"0adbbd0d1d7ba94281728a608353b2c87cbf3107","modified":1573015176609},{"_id":"public/css/gitalk.css","hash":"58177ce227c50ee359fbf99a4fdd26058887afc5","modified":1573015176609},{"_id":"public/js/iconfont.js","hash":"3df68e0aacdb930246103226f779bda9202d00d8","modified":1573015176609},{"_id":"public/js/script.js","hash":"7502191e29366a11323dc72ae365b1aed254e6f2","modified":1573015176609},{"_id":"public/css/fonts/selection.json","hash":"047b615ea32dc48dae5b964061427d41feaaafdf","modified":1573015176609},{"_id":"public/js/gitalk.js","hash":"d1eb82a3280981bd652d9a8e323060e4311c547b","modified":1573015176610},{"_id":"source/_posts/go-proxy.md","hash":"8c244e87c00d5bd7e363ada5a4877645a6a1217d","modified":1588909627681},{"_id":"source/_posts/go-代理.md","hash":"fba9caa083cc3844ccadb0a7fea66c748d2c1d56","modified":1588909659301},{"_id":"public/2020/05/08/go-代理/index.html","hash":"58334173b8514ecdfcb420746c611402ecb83918","modified":1588909679338},{"_id":"public/2020/05/08/go-proxy/index.html","hash":"cd1ab81927633711365d760a3dd8185b8708bbdf","modified":1588909679338},{"_id":"public/archives/2020/index.html","hash":"a6baeae80600e35389df7d136405226a8d1c9743","modified":1588909679338},{"_id":"public/archives/2020/05/index.html","hash":"a6baeae80600e35389df7d136405226a8d1c9743","modified":1588909679338}],"Category":[{"name":"rabbitmq","_id":"ck2msmdar0002m52e7p6bm2b8"},{"name":"docs","_id":"ck2msmdb00007m52ee3x1gktc"},{"name":"go","_id":"ck2msmdb4000dm52e8pkn54ns"},{"name":"http","_id":"ck2msmdbf0010m52e02g4ivif"},{"name":"mysql","_id":"ck2msmdbj0015m52ecbm3nm37"},{"name":"python","_id":"ck2msmdbk001am52ectxm5nc6"}],"Data":[],"Page":[],"Post":[{"title":"AMQP介绍","date":"2018-07-16T09:21:05.000Z","auto_excerpt":{"enable":true,"length":150},"_content":"\n### AMQP介绍\nAMQP，即Advanced Message Queuing Protocol，高级消息队列协议，是应用层协议的一个开放标准，为面向消息的中间件设计。\n\n\nAMQP的主要特征是面向消息、队列、路由（包括点对点和发布/订阅）、可靠性、安全。\n\n\nAMQP在消息提供者和客户端的行为进行了强制规定，使得不同卖商之间真正实现了互操作能力。\n\n\nJMS是早期消息中间件进行标准化的一个尝试，它仅仅是在API级进行了规范，离创建互操作能力还差很远。\n\n\n与JMS不同，AMQP是一个Wire级的协议，它描述了在网络上传输的数据的格式，以字节为流。因此任何遵守此数据格式的工具，其创建和解释消息，都能与其他兼容工具进行互操作。\n<!--more-->\n\nAMQP规范的版本：\n0-8        是2006年6月发布\n0-9        于2006年12月发布\n0-9-1     于2008年11月发布\n0-10      于2009年下半年发布\n1.0 draft  （文档还是草案）\n\n\nAMQP的实现有：\n\n\n1）OpenAMQ\nAMQP的开源实现，用C语言编写，运行于Linux、AIX、Solaris、Windows、OpenVMS。\n\n\n2）Apache Qpid\nApache的开源项目，支持C++、Ruby、Java、JMS、Python和.NET。\n\n\n3）Redhat Enterprise MRG\n实现了AMQP的最新版本0-10，提供了丰富的特征集，比如完全管理、联合、Active-Active集群，有Web控制台，还有许多企业级特征，客户端支持C++、Ruby、Java、JMS、Python和.NET。\n\n\n4）RabbitMQ\n一个独立的开源实现，服务器端用Erlang语言编写，支持多种客户端，如：Python、Ruby、.NET、Java、JMS、C、PHP、 ActionScript、XMPP、STOMP等，支持AJAX。RabbitMQ发布在Ubuntu、FreeBSD平台。\n\n\n5）AMQP Infrastructure\nLinux下，包括Broker、管理工具、Agent和客户端。\n\n\n6）?MQ\n一个高性能的消息平台，在分布式消息网络可作为兼容AMQP的Broker节点，绑定了多种语言，包括Python、C、C++、Lisp、Ruby等。\n\n\n7）Zyre\n是一个Broker，实现了RestMS协议和AMQP协议，提供了RESTful HTTP访问网络AMQP的能力。\n\n \n\nRabbitMQ 是一个由 Erlang 写成的 Advanced Message Queuing Protocol (AMQP) 实现，AMQP 的出现其实也是应了广大人民群众的需求，虽然在同步消息通讯的世界里有很多公开标准（如 COBAR 的 IIOP ，或者是 SOAP等），但是在异步消息处理中却不是这样，只有大企业有一些商业实现（如微软的 MSMQ ，IBM 的 Websphere MQ 等），因此，在 2006 年的 6 月，Cisco 、Redhat、iMatix 等联合制定了 AMQP 的公开标准。\n","source":"_posts/amqp-instraction.md","raw":"---\ntitle: AMQP介绍\ndate: 2018-07-16 17:21:05\ntags:\n- rabbitmq\n\ncategories:\n- rabbitmq\n\nauto_excerpt:\n  enable: true\n  length: 150\n---\n\n### AMQP介绍\nAMQP，即Advanced Message Queuing Protocol，高级消息队列协议，是应用层协议的一个开放标准，为面向消息的中间件设计。\n\n\nAMQP的主要特征是面向消息、队列、路由（包括点对点和发布/订阅）、可靠性、安全。\n\n\nAMQP在消息提供者和客户端的行为进行了强制规定，使得不同卖商之间真正实现了互操作能力。\n\n\nJMS是早期消息中间件进行标准化的一个尝试，它仅仅是在API级进行了规范，离创建互操作能力还差很远。\n\n\n与JMS不同，AMQP是一个Wire级的协议，它描述了在网络上传输的数据的格式，以字节为流。因此任何遵守此数据格式的工具，其创建和解释消息，都能与其他兼容工具进行互操作。\n<!--more-->\n\nAMQP规范的版本：\n0-8        是2006年6月发布\n0-9        于2006年12月发布\n0-9-1     于2008年11月发布\n0-10      于2009年下半年发布\n1.0 draft  （文档还是草案）\n\n\nAMQP的实现有：\n\n\n1）OpenAMQ\nAMQP的开源实现，用C语言编写，运行于Linux、AIX、Solaris、Windows、OpenVMS。\n\n\n2）Apache Qpid\nApache的开源项目，支持C++、Ruby、Java、JMS、Python和.NET。\n\n\n3）Redhat Enterprise MRG\n实现了AMQP的最新版本0-10，提供了丰富的特征集，比如完全管理、联合、Active-Active集群，有Web控制台，还有许多企业级特征，客户端支持C++、Ruby、Java、JMS、Python和.NET。\n\n\n4）RabbitMQ\n一个独立的开源实现，服务器端用Erlang语言编写，支持多种客户端，如：Python、Ruby、.NET、Java、JMS、C、PHP、 ActionScript、XMPP、STOMP等，支持AJAX。RabbitMQ发布在Ubuntu、FreeBSD平台。\n\n\n5）AMQP Infrastructure\nLinux下，包括Broker、管理工具、Agent和客户端。\n\n\n6）?MQ\n一个高性能的消息平台，在分布式消息网络可作为兼容AMQP的Broker节点，绑定了多种语言，包括Python、C、C++、Lisp、Ruby等。\n\n\n7）Zyre\n是一个Broker，实现了RestMS协议和AMQP协议，提供了RESTful HTTP访问网络AMQP的能力。\n\n \n\nRabbitMQ 是一个由 Erlang 写成的 Advanced Message Queuing Protocol (AMQP) 实现，AMQP 的出现其实也是应了广大人民群众的需求，虽然在同步消息通讯的世界里有很多公开标准（如 COBAR 的 IIOP ，或者是 SOAP等），但是在异步消息处理中却不是这样，只有大企业有一些商业实现（如微软的 MSMQ ，IBM 的 Websphere MQ 等），因此，在 2006 年的 6 月，Cisco 、Redhat、iMatix 等联合制定了 AMQP 的公开标准。\n","slug":"amqp-instraction","published":1,"updated":"2019-06-05T04:42:16.392Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2msmdak0000m52exl6c0ax5","content":"<h3 id=\"AMQP介绍\"><a href=\"#AMQP介绍\" class=\"headerlink\" title=\"AMQP介绍\"></a>AMQP介绍</h3><p>AMQP，即Advanced Message Queuing Protocol，高级消息队列协议，是应用层协议的一个开放标准，为面向消息的中间件设计。</p>\n<p>AMQP的主要特征是面向消息、队列、路由（包括点对点和发布/订阅）、可靠性、安全。</p>\n<p>AMQP在消息提供者和客户端的行为进行了强制规定，使得不同卖商之间真正实现了互操作能力。</p>\n<p>JMS是早期消息中间件进行标准化的一个尝试，它仅仅是在API级进行了规范，离创建互操作能力还差很远。</p>\n<p>与JMS不同，AMQP是一个Wire级的协议，它描述了在网络上传输的数据的格式，以字节为流。因此任何遵守此数据格式的工具，其创建和解释消息，都能与其他兼容工具进行互操作。<br><a id=\"more\"></a></p>\n<p>AMQP规范的版本：<br>0-8        是2006年6月发布<br>0-9        于2006年12月发布<br>0-9-1     于2008年11月发布<br>0-10      于2009年下半年发布<br>1.0 draft  （文档还是草案）</p>\n<p>AMQP的实现有：</p>\n<p>1）OpenAMQ<br>AMQP的开源实现，用C语言编写，运行于Linux、AIX、Solaris、Windows、OpenVMS。</p>\n<p>2）Apache Qpid<br>Apache的开源项目，支持C++、Ruby、Java、JMS、Python和.NET。</p>\n<p>3）Redhat Enterprise MRG<br>实现了AMQP的最新版本0-10，提供了丰富的特征集，比如完全管理、联合、Active-Active集群，有Web控制台，还有许多企业级特征，客户端支持C++、Ruby、Java、JMS、Python和.NET。</p>\n<p>4）RabbitMQ<br>一个独立的开源实现，服务器端用Erlang语言编写，支持多种客户端，如：Python、Ruby、.NET、Java、JMS、C、PHP、 ActionScript、XMPP、STOMP等，支持AJAX。RabbitMQ发布在Ubuntu、FreeBSD平台。</p>\n<p>5）AMQP Infrastructure<br>Linux下，包括Broker、管理工具、Agent和客户端。</p>\n<p>6）?MQ<br>一个高性能的消息平台，在分布式消息网络可作为兼容AMQP的Broker节点，绑定了多种语言，包括Python、C、C++、Lisp、Ruby等。</p>\n<p>7）Zyre<br>是一个Broker，实现了RestMS协议和AMQP协议，提供了RESTful HTTP访问网络AMQP的能力。</p>\n<p>RabbitMQ 是一个由 Erlang 写成的 Advanced Message Queuing Protocol (AMQP) 实现，AMQP 的出现其实也是应了广大人民群众的需求，虽然在同步消息通讯的世界里有很多公开标准（如 COBAR 的 IIOP ，或者是 SOAP等），但是在异步消息处理中却不是这样，只有大企业有一些商业实现（如微软的 MSMQ ，IBM 的 Websphere MQ 等），因此，在 2006 年的 6 月，Cisco 、Redhat、iMatix 等联合制定了 AMQP 的公开标准。</p>\n","site":{"data":{}},"excerpt":"<h3 id=\"AMQP介绍\"><a href=\"#AMQP介绍\" class=\"headerlink\" title=\"AMQP介绍\"></a>AMQP介绍</h3><p>AMQP，即Advanced Message Queuing Protocol，高级消息队列协议，是应用层协议的一个开放标准，为面向消息的中间件设计。</p>\n<p>AMQP的主要特征是面向消息、队列、路由（包括点对点和发布/订阅）、可靠性、安全。</p>\n<p>AMQP在消息提供者和客户端的行为进行了强制规定，使得不同卖商之间真正实现了互操作能力。</p>\n<p>JMS是早期消息中间件进行标准化的一个尝试，它仅仅是在API级进行了规范，离创建互操作能力还差很远。</p>\n<p>与JMS不同，AMQP是一个Wire级的协议，它描述了在网络上传输的数据的格式，以字节为流。因此任何遵守此数据格式的工具，其创建和解释消息，都能与其他兼容工具进行互操作。<br>","more":"</p>\n<p>AMQP规范的版本：<br>0-8        是2006年6月发布<br>0-9        于2006年12月发布<br>0-9-1     于2008年11月发布<br>0-10      于2009年下半年发布<br>1.0 draft  （文档还是草案）</p>\n<p>AMQP的实现有：</p>\n<p>1）OpenAMQ<br>AMQP的开源实现，用C语言编写，运行于Linux、AIX、Solaris、Windows、OpenVMS。</p>\n<p>2）Apache Qpid<br>Apache的开源项目，支持C++、Ruby、Java、JMS、Python和.NET。</p>\n<p>3）Redhat Enterprise MRG<br>实现了AMQP的最新版本0-10，提供了丰富的特征集，比如完全管理、联合、Active-Active集群，有Web控制台，还有许多企业级特征，客户端支持C++、Ruby、Java、JMS、Python和.NET。</p>\n<p>4）RabbitMQ<br>一个独立的开源实现，服务器端用Erlang语言编写，支持多种客户端，如：Python、Ruby、.NET、Java、JMS、C、PHP、 ActionScript、XMPP、STOMP等，支持AJAX。RabbitMQ发布在Ubuntu、FreeBSD平台。</p>\n<p>5）AMQP Infrastructure<br>Linux下，包括Broker、管理工具、Agent和客户端。</p>\n<p>6）?MQ<br>一个高性能的消息平台，在分布式消息网络可作为兼容AMQP的Broker节点，绑定了多种语言，包括Python、C、C++、Lisp、Ruby等。</p>\n<p>7）Zyre<br>是一个Broker，实现了RestMS协议和AMQP协议，提供了RESTful HTTP访问网络AMQP的能力。</p>\n<p>RabbitMQ 是一个由 Erlang 写成的 Advanced Message Queuing Protocol (AMQP) 实现，AMQP 的出现其实也是应了广大人民群众的需求，虽然在同步消息通讯的世界里有很多公开标准（如 COBAR 的 IIOP ，或者是 SOAP等），但是在异步消息处理中却不是这样，只有大企业有一些商业实现（如微软的 MSMQ ，IBM 的 Websphere MQ 等），因此，在 2006 年的 6 月，Cisco 、Redhat、iMatix 等联合制定了 AMQP 的公开标准。</p>"},{"title":"doc-href","date":"2019-06-04T08:20:14.000Z","auto_excerpt":{"enable":true,"length":150},"_content":"\n### 工具\n* [hexo 文档](https://hexo.io/zh-cn/docs/)\n\n\n### 框架\n- Java\n   - [dubbo](http://dubbo.apache.org/zh-cn/index.html)\n    \n- Golang\n   - [gorm](https://gorm.io/zh_CN/docs/index.html)\n\n\n### 收藏网站\n- [free-ss](https://free-ss.ooo/)\n","source":"_posts/doc-href.md","raw":"---\ntitle: doc-href\ndate: 2019-06-04 16:20:14\ntags:\n- docs\n\ncategories:\n- docs\n\nauto_excerpt:\n  enable: true\n  length: 150\n---\n\n### 工具\n* [hexo 文档](https://hexo.io/zh-cn/docs/)\n\n\n### 框架\n- Java\n   - [dubbo](http://dubbo.apache.org/zh-cn/index.html)\n    \n- Golang\n   - [gorm](https://gorm.io/zh_CN/docs/index.html)\n\n\n### 收藏网站\n- [free-ss](https://free-ss.ooo/)\n","slug":"doc-href","published":1,"updated":"2019-06-05T06:42:55.789Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2msmdap0001m52eafwqbi0w","content":"<h3 id=\"工具\"><a href=\"#工具\" class=\"headerlink\" title=\"工具\"></a>工具</h3><ul>\n<li><a href=\"https://hexo.io/zh-cn/docs/\" target=\"_blank\" rel=\"noopener\">hexo 文档</a></li>\n</ul>\n<h3 id=\"框架\"><a href=\"#框架\" class=\"headerlink\" title=\"框架\"></a>框架</h3><ul>\n<li><p>Java</p>\n<ul>\n<li><a href=\"http://dubbo.apache.org/zh-cn/index.html\" target=\"_blank\" rel=\"noopener\">dubbo</a></li>\n</ul>\n</li>\n<li><p>Golang</p>\n<ul>\n<li><a href=\"https://gorm.io/zh_CN/docs/index.html\" target=\"_blank\" rel=\"noopener\">gorm</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"收藏网站\"><a href=\"#收藏网站\" class=\"headerlink\" title=\"收藏网站\"></a>收藏网站</h3><ul>\n<li><a href=\"https://free-ss.ooo/\" target=\"_blank\" rel=\"noopener\">free-ss</a></li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"工具\"><a href=\"#工具\" class=\"headerlink\" title=\"工具\"></a>工具</h3><ul>\n<li><a href=\"https://hexo.io/zh-cn/docs/\" target=\"_blank\" rel=\"noopener\">hexo 文档</a></li>\n</ul>\n<h3 id=\"框架\"><a href=\"#框架\" class=\"headerlink\" title=\"框架\"></a>框架</h3><ul>\n<li><p>Java</p>\n<ul>\n<li><a href=\"http://dubbo.apache.org/zh-cn/index.html\" target=\"_blank\" rel=\"noopener\">dubbo</a></li>\n</ul>\n</li>\n<li><p>Golang</p>\n<ul>\n<li><a href=\"https://gorm.io/zh_CN/docs/index.html\" target=\"_blank\" rel=\"noopener\">gorm</a></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"收藏网站\"><a href=\"#收藏网站\" class=\"headerlink\" title=\"收藏网站\"></a>收藏网站</h3><ul>\n<li><a href=\"https://free-ss.ooo/\" target=\"_blank\" rel=\"noopener\">free-ss</a></li>\n</ul>\n"},{"title":"go-future","date":"2019-06-06T07:16:40.000Z","_content":"\n### golang Future 实现\n\n    package utils\n    \n    import (\n        \"sync\"\n        \"time\"\n    )\n    \n    /*\n    Future 是一个未来的任务的抽象。和python里的那个有点类似。\n    在异步任务中SetResult，在GetResult的时候会等待result生成，或者超时。\n    使用姿势：\n    \n    tasks := make([]*utils.Future, 0)\n    for i := 0; i < 10; i++ {\n        future := utils.NewFuture()\n        tasks = append(tasks, future)\n        go func(result int) {\n            time.Sleep(time.Second * time.Duration(rand.Int63n(10)))\n            future.SetResult(result)\n        }(i)\n    }\n    \n    for _, item := range tasks {\n        ret, ok := item.GetResult().(int)\n        if ok {\n            fmt.Println(ret)\n        } else {\n            fmt.Println(\"failed\")\n        }\n    }\n    */\n    \n    type Future struct {\n        isfinished bool\n        result     interface{}\n        resultchan chan interface{}\n        l          sync.Mutex\n    }\n    \n    func (f *Future) GetResult() interface{} {\n        f.l.Lock()\n        defer f.l.Unlock()\n        if f.isfinished {\n            return f.result\n        }\n    \n        select {\n        // timeout\n        case <-time.Tick(time.Second * 6):\n            f.isfinished = true\n            f.result = nil\n            return nil\n        case f.result = <-f.resultchan:\n            f.isfinished = true\n            return f.result\n        }\n    }\n    \n    func (f *Future) SetResult(result interface{}) {\n        if f.isfinished == true {\n            return\n        }\n        f.resultchan <- result\n        close(f.resultchan)\n    }\n    \n    func NewFuture() *Future {\n        return &Future{\n            isfinished: false,\n            result:     nil,\n            resultchan: make(chan interface{}, 1),\n        }\n    }\n\n","source":"_posts/go-future.md","raw":"---\ntitle: go-future\ndate: 2019-06-06 15:16:40\ntags: \n- go\ncategories:\n- go\n---\n\n### golang Future 实现\n\n    package utils\n    \n    import (\n        \"sync\"\n        \"time\"\n    )\n    \n    /*\n    Future 是一个未来的任务的抽象。和python里的那个有点类似。\n    在异步任务中SetResult，在GetResult的时候会等待result生成，或者超时。\n    使用姿势：\n    \n    tasks := make([]*utils.Future, 0)\n    for i := 0; i < 10; i++ {\n        future := utils.NewFuture()\n        tasks = append(tasks, future)\n        go func(result int) {\n            time.Sleep(time.Second * time.Duration(rand.Int63n(10)))\n            future.SetResult(result)\n        }(i)\n    }\n    \n    for _, item := range tasks {\n        ret, ok := item.GetResult().(int)\n        if ok {\n            fmt.Println(ret)\n        } else {\n            fmt.Println(\"failed\")\n        }\n    }\n    */\n    \n    type Future struct {\n        isfinished bool\n        result     interface{}\n        resultchan chan interface{}\n        l          sync.Mutex\n    }\n    \n    func (f *Future) GetResult() interface{} {\n        f.l.Lock()\n        defer f.l.Unlock()\n        if f.isfinished {\n            return f.result\n        }\n    \n        select {\n        // timeout\n        case <-time.Tick(time.Second * 6):\n            f.isfinished = true\n            f.result = nil\n            return nil\n        case f.result = <-f.resultchan:\n            f.isfinished = true\n            return f.result\n        }\n    }\n    \n    func (f *Future) SetResult(result interface{}) {\n        if f.isfinished == true {\n            return\n        }\n        f.resultchan <- result\n        close(f.resultchan)\n    }\n    \n    func NewFuture() *Future {\n        return &Future{\n            isfinished: false,\n            result:     nil,\n            resultchan: make(chan interface{}, 1),\n        }\n    }\n\n","slug":"go-future","published":1,"updated":"2019-06-06T07:24:40.831Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2msmdat0004m52e7sl21jt6","content":"<h3 id=\"golang-Future-实现\"><a href=\"#golang-Future-实现\" class=\"headerlink\" title=\"golang Future 实现\"></a>golang Future 实现</h3><pre><code>package utils\n\nimport (\n    &quot;sync&quot;\n    &quot;time&quot;\n)\n\n/*\nFuture 是一个未来的任务的抽象。和python里的那个有点类似。\n在异步任务中SetResult，在GetResult的时候会等待result生成，或者超时。\n使用姿势：\n\ntasks := make([]*utils.Future, 0)\nfor i := 0; i &lt; 10; i++ {\n    future := utils.NewFuture()\n    tasks = append(tasks, future)\n    go func(result int) {\n        time.Sleep(time.Second * time.Duration(rand.Int63n(10)))\n        future.SetResult(result)\n    }(i)\n}\n\nfor _, item := range tasks {\n    ret, ok := item.GetResult().(int)\n    if ok {\n        fmt.Println(ret)\n    } else {\n        fmt.Println(&quot;failed&quot;)\n    }\n}\n*/\n\ntype Future struct {\n    isfinished bool\n    result     interface{}\n    resultchan chan interface{}\n    l          sync.Mutex\n}\n\nfunc (f *Future) GetResult() interface{} {\n    f.l.Lock()\n    defer f.l.Unlock()\n    if f.isfinished {\n        return f.result\n    }\n\n    select {\n    // timeout\n    case &lt;-time.Tick(time.Second * 6):\n        f.isfinished = true\n        f.result = nil\n        return nil\n    case f.result = &lt;-f.resultchan:\n        f.isfinished = true\n        return f.result\n    }\n}\n\nfunc (f *Future) SetResult(result interface{}) {\n    if f.isfinished == true {\n        return\n    }\n    f.resultchan &lt;- result\n    close(f.resultchan)\n}\n\nfunc NewFuture() *Future {\n    return &amp;Future{\n        isfinished: false,\n        result:     nil,\n        resultchan: make(chan interface{}, 1),\n    }\n}\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<h3 id=\"golang-Future-实现\"><a href=\"#golang-Future-实现\" class=\"headerlink\" title=\"golang Future 实现\"></a>golang Future 实现</h3><pre><code>package utils\n\nimport (\n    &quot;sync&quot;\n    &quot;time&quot;\n)\n\n/*\nFuture 是一个未来的任务的抽象。和python里的那个有点类似。\n在异步任务中SetResult，在GetResult的时候会等待result生成，或者超时。\n使用姿势：\n\ntasks := make([]*utils.Future, 0)\nfor i := 0; i &lt; 10; i++ {\n    future := utils.NewFuture()\n    tasks = append(tasks, future)\n    go func(result int) {\n        time.Sleep(time.Second * time.Duration(rand.Int63n(10)))\n        future.SetResult(result)\n    }(i)\n}\n\nfor _, item := range tasks {\n    ret, ok := item.GetResult().(int)\n    if ok {\n        fmt.Println(ret)\n    } else {\n        fmt.Println(&quot;failed&quot;)\n    }\n}\n*/\n\ntype Future struct {\n    isfinished bool\n    result     interface{}\n    resultchan chan interface{}\n    l          sync.Mutex\n}\n\nfunc (f *Future) GetResult() interface{} {\n    f.l.Lock()\n    defer f.l.Unlock()\n    if f.isfinished {\n        return f.result\n    }\n\n    select {\n    // timeout\n    case &lt;-time.Tick(time.Second * 6):\n        f.isfinished = true\n        f.result = nil\n        return nil\n    case f.result = &lt;-f.resultchan:\n        f.isfinished = true\n        return f.result\n    }\n}\n\nfunc (f *Future) SetResult(result interface{}) {\n    if f.isfinished == true {\n        return\n    }\n    f.resultchan &lt;- result\n    close(f.resultchan)\n}\n\nfunc NewFuture() *Future {\n    return &amp;Future{\n        isfinished: false,\n        result:     nil,\n        resultchan: make(chan interface{}, 1),\n    }\n}\n</code></pre>"},{"title":"go-micro 使用注意事项","date":"2019-11-05T10:30:57.000Z","auto_excerpt":{"enable":true,"length":150},"_content":"\n## 1. micro@v1.14 之后使用 consul 作为注册中心问题\nmicro@v1.14 之后更换了默认的注册中心，把 consul 换成了 etcd ，如果需要使用 consul 作为注册中心，\n需要重新编译 micro。\n\n1. clone 源码：\n\n```shell\ngit clone https://github.com/micro/micro.git \n```\n\n2. 切到源码目录并新增 plugins.go :\n\n``` cd micro源码目录 vi plugins.go``` \n\n```golang\n   package main\n   \n   import (\n   _ \"github.com/micro/go-plugins/registry/consul\"\n    )\n```\n    \n3. 编译\n\n```shell\ngo build -o mainWithConsul main.go plugins.go \n```\n\n4. 运行\n\n```shell\n ./mainWithConsul --registry=consul api \n ```\n\n具体文档请查看 [micro@v1.14之后用户 consul作为注册中心解决方案](https://github.com/micro-in-cn/tutorials/tree/master/examples/basic-practices/micro-registry/etcdv3)\n\n## 2. micro 用 Gin 作为 api 问题\n用 gin 做为 gin-api 服务时， 通过 micro new --type web 创建一个服务出来，注意修改服务的 name，改为 com.example.api.ServiceName,\n且在 gin router 中创建：\n\n```golang\nrouter := gin.Default()\nr := router.Group(\"/ServiceName\")\n\n```\n启动 ```micro api --namespace=com.example.api``` 这里必须要加 api 不然转发不了。\n\n## 3. 使用 micro new 生成模板\n\n使用 micro new 生成模板， RegisterSubscriber 的 topic 名称和 service name 一样，导致大概50%的概率出现请求失败问题。</br>\n\n解决方法: 注释 RegisterSubscriber 部分代码，或者换一个 topic 名称。\n","source":"_posts/go-micro-precautions.md","raw":"---\ntitle: go-micro 使用注意事项\ndate: 2019-11-05 18:30:57\ntags:\n- go\n- golang\n- go-micro\n- 注意事项\n\ncategories:\n- go\n\nauto_excerpt:\n  enable: true\n  length: 150\n---\n\n## 1. micro@v1.14 之后使用 consul 作为注册中心问题\nmicro@v1.14 之后更换了默认的注册中心，把 consul 换成了 etcd ，如果需要使用 consul 作为注册中心，\n需要重新编译 micro。\n\n1. clone 源码：\n\n```shell\ngit clone https://github.com/micro/micro.git \n```\n\n2. 切到源码目录并新增 plugins.go :\n\n``` cd micro源码目录 vi plugins.go``` \n\n```golang\n   package main\n   \n   import (\n   _ \"github.com/micro/go-plugins/registry/consul\"\n    )\n```\n    \n3. 编译\n\n```shell\ngo build -o mainWithConsul main.go plugins.go \n```\n\n4. 运行\n\n```shell\n ./mainWithConsul --registry=consul api \n ```\n\n具体文档请查看 [micro@v1.14之后用户 consul作为注册中心解决方案](https://github.com/micro-in-cn/tutorials/tree/master/examples/basic-practices/micro-registry/etcdv3)\n\n## 2. micro 用 Gin 作为 api 问题\n用 gin 做为 gin-api 服务时， 通过 micro new --type web 创建一个服务出来，注意修改服务的 name，改为 com.example.api.ServiceName,\n且在 gin router 中创建：\n\n```golang\nrouter := gin.Default()\nr := router.Group(\"/ServiceName\")\n\n```\n启动 ```micro api --namespace=com.example.api``` 这里必须要加 api 不然转发不了。\n\n## 3. 使用 micro new 生成模板\n\n使用 micro new 生成模板， RegisterSubscriber 的 topic 名称和 service name 一样，导致大概50%的概率出现请求失败问题。</br>\n\n解决方法: 注释 RegisterSubscriber 部分代码，或者换一个 topic 名称。\n","slug":"go-micro-precautions","published":1,"updated":"2019-11-06T04:39:23.385Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2msmdau0005m52esmpokc7k","content":"<h2 id=\"1-micro-v1-14-之后使用-consul-作为注册中心问题\"><a href=\"#1-micro-v1-14-之后使用-consul-作为注册中心问题\" class=\"headerlink\" title=\"1. micro@v1.14 之后使用 consul 作为注册中心问题\"></a>1. <a href=\"mailto:micro@v1.14\" target=\"_blank\" rel=\"noopener\">micro@v1.14</a> 之后使用 consul 作为注册中心问题</h2><p><a href=\"mailto:micro@v1.14\" target=\"_blank\" rel=\"noopener\">micro@v1.14</a> 之后更换了默认的注册中心，把 consul 换成了 etcd ，如果需要使用 consul 作为注册中心，<br>需要重新编译 micro。</p>\n<ol>\n<li>clone 源码：</li>\n</ol>\n<pre><code class=\"shell\">git clone https://github.com/micro/micro.git \n</code></pre>\n<ol start=\"2\">\n<li>切到源码目录并新增 plugins.go :</li>\n</ol>\n<p><code>cd micro源码目录 vi plugins.go</code> </p>\n<pre><code class=\"golang\">   package main\n\n   import (\n   _ &quot;github.com/micro/go-plugins/registry/consul&quot;\n    )\n</code></pre>\n<ol start=\"3\">\n<li>编译</li>\n</ol>\n<pre><code class=\"shell\">go build -o mainWithConsul main.go plugins.go \n</code></pre>\n<ol start=\"4\">\n<li>运行</li>\n</ol>\n<pre><code class=\"shell\"> ./mainWithConsul --registry=consul api \n</code></pre>\n<p>具体文档请查看 <a href=\"https://github.com/micro-in-cn/tutorials/tree/master/examples/basic-practices/micro-registry/etcdv3\" target=\"_blank\" rel=\"noopener\">micro@v1.14之后用户 consul作为注册中心解决方案</a></p>\n<h2 id=\"2-micro-用-Gin-作为-api-问题\"><a href=\"#2-micro-用-Gin-作为-api-问题\" class=\"headerlink\" title=\"2. micro 用 Gin 作为 api 问题\"></a>2. micro 用 Gin 作为 api 问题</h2><p>用 gin 做为 gin-api 服务时， 通过 micro new –type web 创建一个服务出来，注意修改服务的 name，改为 com.example.api.ServiceName,<br>且在 gin router 中创建：</p>\n<pre><code class=\"golang\">router := gin.Default()\nr := router.Group(&quot;/ServiceName&quot;)\n\n</code></pre>\n<p>启动 <code>micro api --namespace=com.example.api</code> 这里必须要加 api 不然转发不了。</p>\n<h2 id=\"3-使用-micro-new-生成模板\"><a href=\"#3-使用-micro-new-生成模板\" class=\"headerlink\" title=\"3. 使用 micro new 生成模板\"></a>3. 使用 micro new 生成模板</h2><p>使用 micro new 生成模板， RegisterSubscriber 的 topic 名称和 service name 一样，导致大概50%的概率出现请求失败问题。<br></p>\n<p>解决方法: 注释 RegisterSubscriber 部分代码，或者换一个 topic 名称。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-micro-v1-14-之后使用-consul-作为注册中心问题\"><a href=\"#1-micro-v1-14-之后使用-consul-作为注册中心问题\" class=\"headerlink\" title=\"1. micro@v1.14 之后使用 consul 作为注册中心问题\"></a>1. <a href=\"mailto:micro@v1.14\" target=\"_blank\" rel=\"noopener\">micro@v1.14</a> 之后使用 consul 作为注册中心问题</h2><p><a href=\"mailto:micro@v1.14\" target=\"_blank\" rel=\"noopener\">micro@v1.14</a> 之后更换了默认的注册中心，把 consul 换成了 etcd ，如果需要使用 consul 作为注册中心，<br>需要重新编译 micro。</p>\n<ol>\n<li>clone 源码：</li>\n</ol>\n<pre><code class=\"shell\">git clone https://github.com/micro/micro.git \n</code></pre>\n<ol start=\"2\">\n<li>切到源码目录并新增 plugins.go :</li>\n</ol>\n<p><code>cd micro源码目录 vi plugins.go</code> </p>\n<pre><code class=\"golang\">   package main\n\n   import (\n   _ &quot;github.com/micro/go-plugins/registry/consul&quot;\n    )\n</code></pre>\n<ol start=\"3\">\n<li>编译</li>\n</ol>\n<pre><code class=\"shell\">go build -o mainWithConsul main.go plugins.go \n</code></pre>\n<ol start=\"4\">\n<li>运行</li>\n</ol>\n<pre><code class=\"shell\"> ./mainWithConsul --registry=consul api \n</code></pre>\n<p>具体文档请查看 <a href=\"https://github.com/micro-in-cn/tutorials/tree/master/examples/basic-practices/micro-registry/etcdv3\" target=\"_blank\" rel=\"noopener\">micro@v1.14之后用户 consul作为注册中心解决方案</a></p>\n<h2 id=\"2-micro-用-Gin-作为-api-问题\"><a href=\"#2-micro-用-Gin-作为-api-问题\" class=\"headerlink\" title=\"2. micro 用 Gin 作为 api 问题\"></a>2. micro 用 Gin 作为 api 问题</h2><p>用 gin 做为 gin-api 服务时， 通过 micro new –type web 创建一个服务出来，注意修改服务的 name，改为 com.example.api.ServiceName,<br>且在 gin router 中创建：</p>\n<pre><code class=\"golang\">router := gin.Default()\nr := router.Group(&quot;/ServiceName&quot;)\n\n</code></pre>\n<p>启动 <code>micro api --namespace=com.example.api</code> 这里必须要加 api 不然转发不了。</p>\n<h2 id=\"3-使用-micro-new-生成模板\"><a href=\"#3-使用-micro-new-生成模板\" class=\"headerlink\" title=\"3. 使用 micro new 生成模板\"></a>3. 使用 micro new 生成模板</h2><p>使用 micro new 生成模板， RegisterSubscriber 的 topic 名称和 service name 一样，导致大概50%的概率出现请求失败问题。<br></p>\n<p>解决方法: 注释 RegisterSubscriber 部分代码，或者换一个 topic 名称。</p>\n"},{"title":"go-生成随机字符串","date":"2019-06-13T07:41:22.000Z","_content":"\n### 随机字符串\n\n```go\n\n//RandomStr 随机生成字符串\nfunc RandomStr(length int) string {\n\tstr := \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n\tbytes := []byte(str)\n\tresult := []byte{}\n\tr := rand.New(rand.NewSource(time.Now().UnixNano()))\n\tfor i := 0; i < length; i++ {\n\t\tresult = append(result, bytes[r.Intn(len(bytes))])\n\t}\n\treturn string(result)\n}\n```\n\n###  生成定长字符串\n\n\n```go\n//获得定长字符串\n//str 填充字符串\n//length 获得定长的长度\n//char 不够长时填充的字符\nfunc GetFixedLenString(str string, length int, char byte) string {\n\tif len(str) == 0 {\n\t\treturn \"\"\n\t}\n\n\tif len(str) == length {\n\t\treturn str\n\t}\n\n\t//超出切后面\n\tif len(str) > length {\n\t\treturn string(str[:length])\n\t}\n\n\t//缺少添加char\n\tif len(str) < length {\n\t\tslice := make([]byte, length-len(str))\n\t\tfor k := range slice {\n\t\t\tslice[k] = char\n\t\t}\n\t\treturn string(append(slice, []byte(str)...))\n\t}\n\n\treturn \"\"\n}\n\n```\n### 获得定长byte slice\n```go\n//获得定长byte slice\n//str 填充字符串\n//length 获得定长的长度\n//char 不够长时填充的字符\nfunc GetFixedLenByte(b []byte, length int, char byte) (tb []byte) {\n\tif len(b) == 0 {\n\t\treturn\n\t}\n\n\tif len(b) == length {\n\t\treturn b\n\t}\n\n\t//超出切后面\n\tif len(b) > length {\n\t\treturn b[:length]\n\t}\n\n\t//缺少添加char\n\tif len(b) < length {\n\t\tslice := make([]byte, length-len(b))\n\t\tfor k := range slice {\n\t\t\tslice[k] = char\n\t\t}\n\t\treturn append(slice, []byte(b)...)\n\t}\n\n\treturn\n}\n```\n","source":"_posts/go-生成随机字符串.md","raw":"---\ntitle: go-生成随机字符串\ndate: 2019-06-13 15:41:22\ntags: \n- go\ncategories:\n- go\n---\n\n### 随机字符串\n\n```go\n\n//RandomStr 随机生成字符串\nfunc RandomStr(length int) string {\n\tstr := \"0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ\"\n\tbytes := []byte(str)\n\tresult := []byte{}\n\tr := rand.New(rand.NewSource(time.Now().UnixNano()))\n\tfor i := 0; i < length; i++ {\n\t\tresult = append(result, bytes[r.Intn(len(bytes))])\n\t}\n\treturn string(result)\n}\n```\n\n###  生成定长字符串\n\n\n```go\n//获得定长字符串\n//str 填充字符串\n//length 获得定长的长度\n//char 不够长时填充的字符\nfunc GetFixedLenString(str string, length int, char byte) string {\n\tif len(str) == 0 {\n\t\treturn \"\"\n\t}\n\n\tif len(str) == length {\n\t\treturn str\n\t}\n\n\t//超出切后面\n\tif len(str) > length {\n\t\treturn string(str[:length])\n\t}\n\n\t//缺少添加char\n\tif len(str) < length {\n\t\tslice := make([]byte, length-len(str))\n\t\tfor k := range slice {\n\t\t\tslice[k] = char\n\t\t}\n\t\treturn string(append(slice, []byte(str)...))\n\t}\n\n\treturn \"\"\n}\n\n```\n### 获得定长byte slice\n```go\n//获得定长byte slice\n//str 填充字符串\n//length 获得定长的长度\n//char 不够长时填充的字符\nfunc GetFixedLenByte(b []byte, length int, char byte) (tb []byte) {\n\tif len(b) == 0 {\n\t\treturn\n\t}\n\n\tif len(b) == length {\n\t\treturn b\n\t}\n\n\t//超出切后面\n\tif len(b) > length {\n\t\treturn b[:length]\n\t}\n\n\t//缺少添加char\n\tif len(b) < length {\n\t\tslice := make([]byte, length-len(b))\n\t\tfor k := range slice {\n\t\t\tslice[k] = char\n\t\t}\n\t\treturn append(slice, []byte(b)...)\n\t}\n\n\treturn\n}\n```\n","slug":"go-生成随机字符串","published":1,"updated":"2019-06-13T07:42:42.686Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2msmday0006m52edqcuayz3","content":"<h3 id=\"随机字符串\"><a href=\"#随机字符串\" class=\"headerlink\" title=\"随机字符串\"></a>随机字符串</h3><pre><code class=\"go\">\n//RandomStr 随机生成字符串\nfunc RandomStr(length int) string {\n    str := &quot;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;\n    bytes := []byte(str)\n    result := []byte{}\n    r := rand.New(rand.NewSource(time.Now().UnixNano()))\n    for i := 0; i &lt; length; i++ {\n        result = append(result, bytes[r.Intn(len(bytes))])\n    }\n    return string(result)\n}\n</code></pre>\n<h3 id=\"生成定长字符串\"><a href=\"#生成定长字符串\" class=\"headerlink\" title=\"生成定长字符串\"></a>生成定长字符串</h3><pre><code class=\"go\">//获得定长字符串\n//str 填充字符串\n//length 获得定长的长度\n//char 不够长时填充的字符\nfunc GetFixedLenString(str string, length int, char byte) string {\n    if len(str) == 0 {\n        return &quot;&quot;\n    }\n\n    if len(str) == length {\n        return str\n    }\n\n    //超出切后面\n    if len(str) &gt; length {\n        return string(str[:length])\n    }\n\n    //缺少添加char\n    if len(str) &lt; length {\n        slice := make([]byte, length-len(str))\n        for k := range slice {\n            slice[k] = char\n        }\n        return string(append(slice, []byte(str)...))\n    }\n\n    return &quot;&quot;\n}\n\n</code></pre>\n<h3 id=\"获得定长byte-slice\"><a href=\"#获得定长byte-slice\" class=\"headerlink\" title=\"获得定长byte slice\"></a>获得定长byte slice</h3><pre><code class=\"go\">//获得定长byte slice\n//str 填充字符串\n//length 获得定长的长度\n//char 不够长时填充的字符\nfunc GetFixedLenByte(b []byte, length int, char byte) (tb []byte) {\n    if len(b) == 0 {\n        return\n    }\n\n    if len(b) == length {\n        return b\n    }\n\n    //超出切后面\n    if len(b) &gt; length {\n        return b[:length]\n    }\n\n    //缺少添加char\n    if len(b) &lt; length {\n        slice := make([]byte, length-len(b))\n        for k := range slice {\n            slice[k] = char\n        }\n        return append(slice, []byte(b)...)\n    }\n\n    return\n}\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"随机字符串\"><a href=\"#随机字符串\" class=\"headerlink\" title=\"随机字符串\"></a>随机字符串</h3><pre><code class=\"go\">\n//RandomStr 随机生成字符串\nfunc RandomStr(length int) string {\n    str := &quot;0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ&quot;\n    bytes := []byte(str)\n    result := []byte{}\n    r := rand.New(rand.NewSource(time.Now().UnixNano()))\n    for i := 0; i &lt; length; i++ {\n        result = append(result, bytes[r.Intn(len(bytes))])\n    }\n    return string(result)\n}\n</code></pre>\n<h3 id=\"生成定长字符串\"><a href=\"#生成定长字符串\" class=\"headerlink\" title=\"生成定长字符串\"></a>生成定长字符串</h3><pre><code class=\"go\">//获得定长字符串\n//str 填充字符串\n//length 获得定长的长度\n//char 不够长时填充的字符\nfunc GetFixedLenString(str string, length int, char byte) string {\n    if len(str) == 0 {\n        return &quot;&quot;\n    }\n\n    if len(str) == length {\n        return str\n    }\n\n    //超出切后面\n    if len(str) &gt; length {\n        return string(str[:length])\n    }\n\n    //缺少添加char\n    if len(str) &lt; length {\n        slice := make([]byte, length-len(str))\n        for k := range slice {\n            slice[k] = char\n        }\n        return string(append(slice, []byte(str)...))\n    }\n\n    return &quot;&quot;\n}\n\n</code></pre>\n<h3 id=\"获得定长byte-slice\"><a href=\"#获得定长byte-slice\" class=\"headerlink\" title=\"获得定长byte slice\"></a>获得定长byte slice</h3><pre><code class=\"go\">//获得定长byte slice\n//str 填充字符串\n//length 获得定长的长度\n//char 不够长时填充的字符\nfunc GetFixedLenByte(b []byte, length int, char byte) (tb []byte) {\n    if len(b) == 0 {\n        return\n    }\n\n    if len(b) == length {\n        return b\n    }\n\n    //超出切后面\n    if len(b) &gt; length {\n        return b[:length]\n    }\n\n    //缺少添加char\n    if len(b) &lt; length {\n        slice := make([]byte, length-len(b))\n        for k := range slice {\n            slice[k] = char\n        }\n        return append(slice, []byte(b)...)\n    }\n\n    return\n}\n</code></pre>\n"},{"title":"go-生成随机验证码","date":"2019-06-25T03:50:35.000Z","_content":"\n```go\n\n\npackage main\n \nimport (\n\t\"fmt\"\n\t\"math/rand\"\n\t\"strings\"\n\t\"time\"\n)\n \nfunc GenValidateCode(width int) string {\n\tnumeric := [10]byte{0,1,2,3,4,5,6,7,8,9}\n\tr := len(numeric)\n\trand.Seed(time.Now().UnixNano())\n \n\tvar sb strings.Builder\n\tfor i := 0; i < width; i++ {\n\t\tfmt.Fprintf(&sb, \"%d\", numeric[ rand.Intn(r) ])\n\t}\n\treturn sb.String()\n}\n \nfunc main() {\n\tfmt.Println( GenValidateCode(6) )\n}\n\n```\n","source":"_posts/go-生成随机验证码.md","raw":"---\ntitle: go-生成随机验证码\ndate: 2019-06-25 11:50:35\ntags: \n- go\ncategories:\n- go\n\n---\n\n```go\n\n\npackage main\n \nimport (\n\t\"fmt\"\n\t\"math/rand\"\n\t\"strings\"\n\t\"time\"\n)\n \nfunc GenValidateCode(width int) string {\n\tnumeric := [10]byte{0,1,2,3,4,5,6,7,8,9}\n\tr := len(numeric)\n\trand.Seed(time.Now().UnixNano())\n \n\tvar sb strings.Builder\n\tfor i := 0; i < width; i++ {\n\t\tfmt.Fprintf(&sb, \"%d\", numeric[ rand.Intn(r) ])\n\t}\n\treturn sb.String()\n}\n \nfunc main() {\n\tfmt.Println( GenValidateCode(6) )\n}\n\n```\n","slug":"go-生成随机验证码","published":1,"updated":"2019-06-25T03:51:52.612Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2msmdb1000am52efnadyah2","content":"<pre><code class=\"go\">\n\npackage main\n\nimport (\n    &quot;fmt&quot;\n    &quot;math/rand&quot;\n    &quot;strings&quot;\n    &quot;time&quot;\n)\n\nfunc GenValidateCode(width int) string {\n    numeric := [10]byte{0,1,2,3,4,5,6,7,8,9}\n    r := len(numeric)\n    rand.Seed(time.Now().UnixNano())\n\n    var sb strings.Builder\n    for i := 0; i &lt; width; i++ {\n        fmt.Fprintf(&amp;sb, &quot;%d&quot;, numeric[ rand.Intn(r) ])\n    }\n    return sb.String()\n}\n\nfunc main() {\n    fmt.Println( GenValidateCode(6) )\n}\n\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<pre><code class=\"go\">\n\npackage main\n\nimport (\n    &quot;fmt&quot;\n    &quot;math/rand&quot;\n    &quot;strings&quot;\n    &quot;time&quot;\n)\n\nfunc GenValidateCode(width int) string {\n    numeric := [10]byte{0,1,2,3,4,5,6,7,8,9}\n    r := len(numeric)\n    rand.Seed(time.Now().UnixNano())\n\n    var sb strings.Builder\n    for i := 0; i &lt; width; i++ {\n        fmt.Fprintf(&amp;sb, &quot;%d&quot;, numeric[ rand.Intn(r) ])\n    }\n    return sb.String()\n}\n\nfunc main() {\n    fmt.Println( GenValidateCode(6) )\n}\n\n</code></pre>\n"},{"title":"gorm-mysql-json","date":"2019-06-11T08:55:56.000Z","_content":"\n1. Add new type named JSON and rewrite methods:\n```\n    package models\n    import (\n        \"bytes\"\n        \"errors\"\n        \"database/sql/driver\"\n    )\n    type JSON []byte\n    func (j JSON) Value() (driver.Value, error) {\n        if j.IsNull() {\n            return nil, nil\n        }\n        return string(j), nil\n    }\n    func (j *JSON) Scan(value interface{}) error {\n        if value == nil {\n            *j = nil\n            return nil\n        }\n        s, ok := value.([]byte)\n        if !ok {\n            errors.New(\"Invalid Scan Source\")\n        }\n        *j = append((*j)[0:0], s...)\n        return nil\n    }\n    func (m JSON) MarshalJSON() ([]byte, error) {\n        if m == nil {\n            return []byte(\"null\"), nil\n        }\n        return m, nil\n    }\n    func (m *JSON) UnmarshalJSON(data []byte) error {\n        if m == nil {\n            return errors.New(\"null point exception\")\n        }\n        *m = append((*m)[0:0], data...)\n        return nil\n    }\n    func (j JSON) IsNull() bool {\n        return len(j) == 0 || string(j) == \"null\"\n    }\n    func (j JSON) Equals(j1 JSON) bool {\n        return bytes.Equal([]byte(j), []byte(j1))\n    }\n```\n\n2. Use new JSON type:\n```\npackage models\ntype Model struct {\n    ID        int   `gorm:\"primary_key\" json:\"id\"`\n    CreatedAt int64 `json:\"createdAt\"`\n    UpdatedAt int64 `json:\"updatedAt\"`\n    Object    JSON  `sql:\"type:json\" json:\"object,omitempty\"`\n}\n```\n\n\n","source":"_posts/gorm-mysql-json.md","raw":"---\ntitle: gorm-mysql-json\ndate: 2019-06-11 16:55:56\ntags:\n- go\ncategories:\n- go\n---\n\n1. Add new type named JSON and rewrite methods:\n```\n    package models\n    import (\n        \"bytes\"\n        \"errors\"\n        \"database/sql/driver\"\n    )\n    type JSON []byte\n    func (j JSON) Value() (driver.Value, error) {\n        if j.IsNull() {\n            return nil, nil\n        }\n        return string(j), nil\n    }\n    func (j *JSON) Scan(value interface{}) error {\n        if value == nil {\n            *j = nil\n            return nil\n        }\n        s, ok := value.([]byte)\n        if !ok {\n            errors.New(\"Invalid Scan Source\")\n        }\n        *j = append((*j)[0:0], s...)\n        return nil\n    }\n    func (m JSON) MarshalJSON() ([]byte, error) {\n        if m == nil {\n            return []byte(\"null\"), nil\n        }\n        return m, nil\n    }\n    func (m *JSON) UnmarshalJSON(data []byte) error {\n        if m == nil {\n            return errors.New(\"null point exception\")\n        }\n        *m = append((*m)[0:0], data...)\n        return nil\n    }\n    func (j JSON) IsNull() bool {\n        return len(j) == 0 || string(j) == \"null\"\n    }\n    func (j JSON) Equals(j1 JSON) bool {\n        return bytes.Equal([]byte(j), []byte(j1))\n    }\n```\n\n2. Use new JSON type:\n```\npackage models\ntype Model struct {\n    ID        int   `gorm:\"primary_key\" json:\"id\"`\n    CreatedAt int64 `json:\"createdAt\"`\n    UpdatedAt int64 `json:\"updatedAt\"`\n    Object    JSON  `sql:\"type:json\" json:\"object,omitempty\"`\n}\n```\n\n\n","slug":"gorm-mysql-json","published":1,"updated":"2019-06-11T08:59:27.114Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2msmdb2000bm52ezb28es9s","content":"<ol>\n<li><p>Add new type named JSON and rewrite methods:</p>\n<pre><code> package models\n import (\n     &quot;bytes&quot;\n     &quot;errors&quot;\n     &quot;database/sql/driver&quot;\n )\n type JSON []byte\n func (j JSON) Value() (driver.Value, error) {\n     if j.IsNull() {\n         return nil, nil\n     }\n     return string(j), nil\n }\n func (j *JSON) Scan(value interface{}) error {\n     if value == nil {\n         *j = nil\n         return nil\n     }\n     s, ok := value.([]byte)\n     if !ok {\n         errors.New(&quot;Invalid Scan Source&quot;)\n     }\n     *j = append((*j)[0:0], s...)\n     return nil\n }\n func (m JSON) MarshalJSON() ([]byte, error) {\n     if m == nil {\n         return []byte(&quot;null&quot;), nil\n     }\n     return m, nil\n }\n func (m *JSON) UnmarshalJSON(data []byte) error {\n     if m == nil {\n         return errors.New(&quot;null point exception&quot;)\n     }\n     *m = append((*m)[0:0], data...)\n     return nil\n }\n func (j JSON) IsNull() bool {\n     return len(j) == 0 || string(j) == &quot;null&quot;\n }\n func (j JSON) Equals(j1 JSON) bool {\n     return bytes.Equal([]byte(j), []byte(j1))\n }\n</code></pre></li>\n<li><p>Use new JSON type:</p>\n<pre><code>package models\ntype Model struct {\n ID        int   `gorm:&quot;primary_key&quot; json:&quot;id&quot;`\n CreatedAt int64 `json:&quot;createdAt&quot;`\n UpdatedAt int64 `json:&quot;updatedAt&quot;`\n Object    JSON  `sql:&quot;type:json&quot; json:&quot;object,omitempty&quot;`\n}\n</code></pre></li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<ol>\n<li><p>Add new type named JSON and rewrite methods:</p>\n<pre><code> package models\n import (\n     &quot;bytes&quot;\n     &quot;errors&quot;\n     &quot;database/sql/driver&quot;\n )\n type JSON []byte\n func (j JSON) Value() (driver.Value, error) {\n     if j.IsNull() {\n         return nil, nil\n     }\n     return string(j), nil\n }\n func (j *JSON) Scan(value interface{}) error {\n     if value == nil {\n         *j = nil\n         return nil\n     }\n     s, ok := value.([]byte)\n     if !ok {\n         errors.New(&quot;Invalid Scan Source&quot;)\n     }\n     *j = append((*j)[0:0], s...)\n     return nil\n }\n func (m JSON) MarshalJSON() ([]byte, error) {\n     if m == nil {\n         return []byte(&quot;null&quot;), nil\n     }\n     return m, nil\n }\n func (m *JSON) UnmarshalJSON(data []byte) error {\n     if m == nil {\n         return errors.New(&quot;null point exception&quot;)\n     }\n     *m = append((*m)[0:0], data...)\n     return nil\n }\n func (j JSON) IsNull() bool {\n     return len(j) == 0 || string(j) == &quot;null&quot;\n }\n func (j JSON) Equals(j1 JSON) bool {\n     return bytes.Equal([]byte(j), []byte(j1))\n }\n</code></pre></li>\n<li><p>Use new JSON type:</p>\n<pre><code>package models\ntype Model struct {\n ID        int   `gorm:&quot;primary_key&quot; json:&quot;id&quot;`\n CreatedAt int64 `json:&quot;createdAt&quot;`\n UpdatedAt int64 `json:&quot;updatedAt&quot;`\n Object    JSON  `sql:&quot;type:json&quot; json:&quot;object,omitempty&quot;`\n}\n</code></pre></li>\n</ol>\n"},{"title":"HTTP Status Code","date":"2018-04-18T09:21:05.000Z","updated":"2018-04-18T09:21:05.000Z","auto_excerpt":{"enable":true,"length":150},"_content":"\n\n当用户试图通过HTTP或FTP协议访问一台运行主机上的内容时，Web服务器返回一个表示该请求的状态的数字代码。该状态代码记录在服务器日志中，同时也可能在 Web 浏览器或 FTP客户端显示。也就是我们打开页面发生错误时浏览器显示的错误信息代码。状态代码可以指明具体请求是否已成功，还可以揭示请求失败的确切原因。\nHTTP协议状态码表示的意思主要分为五类 ,大体是 :\n\n```\n1×× 　　保留\n2×× 　　表示请求成功地接收\n3×× 　　为完成请求客户需进一步细化请求\n4×× 　　客户错误\n5×× 　　服务器错误\n```\n<!--more-->\n\n### 100 Continue\n指示客户端应该继续请求。回送用于通知客户端此次请求已经收到，并且没有被服务器拒绝。\n客户端应该继续发送剩下的请求数据或者请求已经完成，或者忽略回送数据。服务器必须发送\n最后的回送在请求之后。\n\n### 101 Switching Protocols \n服务器依照客服端请求，通过Upgrade头信息，改变当前连接的应用协议。服务器将根据Upgrade头立刻改变协议\n在101回送以空行结束的时候。\n\n# Successful \n\n### 200 OK\n指示客服端的请求已经成功收到，解析，接受。\n### 201 Created \n请求已经完成并一个新的返回资源被创建。被创建的资源可能是一个URI资源，通常URI资源在Location头指定。回送应该包含一个实体数据\n并且包含资源特性以及location通过用户或者用户代理来选择合适的方法。实体数据格式通过煤体类型来指定即content-type头。最开始服务 器\n必须创建指定的资源在返回201状态码之前。如果行为没有被立刻执行，服务器应该返回202。\n### 202 Accepted \n请求已经被接受用来处理。但是处理并没有完成。请求可能或者根本没有遵照执行，因为处理实际执行过程中可能被拒绝。\n### 203 Non-Authoritative Information\n不是权威性信息。\n### 204 No Content \n服务器已经接受请求并且没必要返回实体数据，可能需要返回更新信息。回送可能包含新的或更新信息由entity-headers呈现。\n### 205 Reset Content \n服务器已经接受请求并且用户代理应该重新设置文档视图。\n### 206 Partial Content \n服务器已经接受请求GET请求资源的部分。请求必须包含一个Range头信息以指示获取范围可能必须包含If-Range头信息以成立请求条件。\n# Redirection \n\n### 300 Multiple Choices\n请求资源符合任何一个呈现方式。\n### 301 Moved Permanently \n请求的资源已经被赋予一个新的URI。\n### 302 Found \n通过不同的URI请求资源的临时文件。\n### 303 See Other\n### 304 Not Modified \n如果客服端已经完成一个有条件的请求并且请求是允许的，但是这个文档并没有改变，服务器应该返回304状态码。304\n状态码一定不能包含信息主体，从而通常通过一个头字段后的第一个空行结束。\n### 305 Use Proxy\n请求的资源必须通过代理（由Location字段指定）来访问。Location资源给出了代理的URI。\n### 306 Unused\n### 307 Temporary Redirect\n临时重定向。\n# Client Error\n\n### 400 Bad Request\n因为错误的语法导致服务器无法理解请求信息。\n### 401 Unauthorized \n如果请求需要用户验证。回送应该包含一个WWW-Authenticate头字段用来指明请求资源的权限。\n### 402 Payment Required \n保留状态码。\n### 403 Forbidden \n服务器接受请求，但是被拒绝处理。\n### 404 Not Found \n服务器已经找到任何匹配Request-URI的资源。\n### 405 Menthod Not Allowed \nRequest-Line 请求的方法不被允许通过指定的URI。\n### 406 Not Acceptable\n客户端浏览器不接受所请求页面的 MIME 类型。\n### 407 Proxy Authentication Required\n要求进行代理身份验证。\n### 408 Reqeust Timeout \n客服端没有提交任何请求在服务器等待处理时间内。\n### 409 Conflict\n### 410 Gone\n### 411 Length Required \n服务器拒绝接受请求在没有定义Content-Length字段的情况下。\n### 412 Precondition Failed\n前提条件失败。\n### 413 Request Entity Too Large \n服务器拒绝处理请求因为请求数据超过服务器能够处理的范围。服务器可能关闭当前连接来阻止客服端继续请求。\n### 414 Request-URI Too Long \n服务器拒绝服务当前请求因为URI的长度超过了服务器的解析范围。\n### 415 Unsupported Media Type \n服务器拒绝服务当前请求因为请求数据格式并不被请求的资源支持。\n### 416 Request Range Not Satisfialbe\n所请求的范围无法满足。\n### 417 Expectation Failed\n执行失败。\n# Server Error \n\n### 500 Internal Server Error\n服务器遭遇异常阻止了当前请求的执行\n### 501 Not Implemented \n服务器没有相应的执行动作来完成当前请求。\n### 502 Bad Gateway\nWeb 服务器用作网关或代理服务器时收到了无效响应。\n### 503 Service Unavailable \n因为临时文件超载导致服务器不能处理当前请求。\n### 504 Gateway Timeout\n网关访问超时。\n### 505 Http Version Not Supported\nHTTP 版本不受支持。\n\n```\n\"100\" : Continue\n\"101\" : witching Protocols\n\"200\" : OK\n\"201\" : Created\n\"202\" : Accepted\n\"203\" : Non-Authoritative Information\n\"204\" : No Content\n\"205\" : Reset Content\n\"206\" : Partial Content\n\"300\" : Multiple Choices\n\"301\" : Moved Permanently\n\"302\" : Found\n\"303\" : See Other\n\"304\" : Not Modified\n\"305\" : Use Proxy\n\"307\" : Temporary Redirect\n\"400\" : Bad Request\n\"401\" : Unauthorized\n\"402\" : Payment Required\n\"403\" : Forbidden\n\"404\" : Not Found\n\"405\" : Method Not Allowed\n\"406\" : Not Acceptable\n\"407\" : Proxy Authentication Required\n\"408\" : Request Time-out\n\"409\" : Conflict\n\"410\" : Gone\n\"411\" : Length Required\n\"412\" : Precondition Failed\n\"413\" : Request Entity Too Large\n\"414\" : Request-URI Too Large\n\"415\" : Unsupported Media Type\n\"416\" : Requested range not satisfiable\n\"417\" : Expectation Failed\n\"500\" : Internal Server Error\n\"501\" : Not Implemented\n\"502\" : Bad Gateway\n\"503\" : Service Unavailable\n\"504\" : Gateway Time-out\n\"505\" : HTTP Version not supported\n```\n","source":"_posts/http-status-code.md","raw":"---\ntitle: HTTP Status Code\ndate: 2018-04-18 17:21:05\nupdated: 2018-04-18 17:21:05\ntags:\n- http\n- web\ncategories:\n- http\n\n\nauto_excerpt:\n  enable: true\n  length: 150\n---\n\n\n当用户试图通过HTTP或FTP协议访问一台运行主机上的内容时，Web服务器返回一个表示该请求的状态的数字代码。该状态代码记录在服务器日志中，同时也可能在 Web 浏览器或 FTP客户端显示。也就是我们打开页面发生错误时浏览器显示的错误信息代码。状态代码可以指明具体请求是否已成功，还可以揭示请求失败的确切原因。\nHTTP协议状态码表示的意思主要分为五类 ,大体是 :\n\n```\n1×× 　　保留\n2×× 　　表示请求成功地接收\n3×× 　　为完成请求客户需进一步细化请求\n4×× 　　客户错误\n5×× 　　服务器错误\n```\n<!--more-->\n\n### 100 Continue\n指示客户端应该继续请求。回送用于通知客户端此次请求已经收到，并且没有被服务器拒绝。\n客户端应该继续发送剩下的请求数据或者请求已经完成，或者忽略回送数据。服务器必须发送\n最后的回送在请求之后。\n\n### 101 Switching Protocols \n服务器依照客服端请求，通过Upgrade头信息，改变当前连接的应用协议。服务器将根据Upgrade头立刻改变协议\n在101回送以空行结束的时候。\n\n# Successful \n\n### 200 OK\n指示客服端的请求已经成功收到，解析，接受。\n### 201 Created \n请求已经完成并一个新的返回资源被创建。被创建的资源可能是一个URI资源，通常URI资源在Location头指定。回送应该包含一个实体数据\n并且包含资源特性以及location通过用户或者用户代理来选择合适的方法。实体数据格式通过煤体类型来指定即content-type头。最开始服务 器\n必须创建指定的资源在返回201状态码之前。如果行为没有被立刻执行，服务器应该返回202。\n### 202 Accepted \n请求已经被接受用来处理。但是处理并没有完成。请求可能或者根本没有遵照执行，因为处理实际执行过程中可能被拒绝。\n### 203 Non-Authoritative Information\n不是权威性信息。\n### 204 No Content \n服务器已经接受请求并且没必要返回实体数据，可能需要返回更新信息。回送可能包含新的或更新信息由entity-headers呈现。\n### 205 Reset Content \n服务器已经接受请求并且用户代理应该重新设置文档视图。\n### 206 Partial Content \n服务器已经接受请求GET请求资源的部分。请求必须包含一个Range头信息以指示获取范围可能必须包含If-Range头信息以成立请求条件。\n# Redirection \n\n### 300 Multiple Choices\n请求资源符合任何一个呈现方式。\n### 301 Moved Permanently \n请求的资源已经被赋予一个新的URI。\n### 302 Found \n通过不同的URI请求资源的临时文件。\n### 303 See Other\n### 304 Not Modified \n如果客服端已经完成一个有条件的请求并且请求是允许的，但是这个文档并没有改变，服务器应该返回304状态码。304\n状态码一定不能包含信息主体，从而通常通过一个头字段后的第一个空行结束。\n### 305 Use Proxy\n请求的资源必须通过代理（由Location字段指定）来访问。Location资源给出了代理的URI。\n### 306 Unused\n### 307 Temporary Redirect\n临时重定向。\n# Client Error\n\n### 400 Bad Request\n因为错误的语法导致服务器无法理解请求信息。\n### 401 Unauthorized \n如果请求需要用户验证。回送应该包含一个WWW-Authenticate头字段用来指明请求资源的权限。\n### 402 Payment Required \n保留状态码。\n### 403 Forbidden \n服务器接受请求，但是被拒绝处理。\n### 404 Not Found \n服务器已经找到任何匹配Request-URI的资源。\n### 405 Menthod Not Allowed \nRequest-Line 请求的方法不被允许通过指定的URI。\n### 406 Not Acceptable\n客户端浏览器不接受所请求页面的 MIME 类型。\n### 407 Proxy Authentication Required\n要求进行代理身份验证。\n### 408 Reqeust Timeout \n客服端没有提交任何请求在服务器等待处理时间内。\n### 409 Conflict\n### 410 Gone\n### 411 Length Required \n服务器拒绝接受请求在没有定义Content-Length字段的情况下。\n### 412 Precondition Failed\n前提条件失败。\n### 413 Request Entity Too Large \n服务器拒绝处理请求因为请求数据超过服务器能够处理的范围。服务器可能关闭当前连接来阻止客服端继续请求。\n### 414 Request-URI Too Long \n服务器拒绝服务当前请求因为URI的长度超过了服务器的解析范围。\n### 415 Unsupported Media Type \n服务器拒绝服务当前请求因为请求数据格式并不被请求的资源支持。\n### 416 Request Range Not Satisfialbe\n所请求的范围无法满足。\n### 417 Expectation Failed\n执行失败。\n# Server Error \n\n### 500 Internal Server Error\n服务器遭遇异常阻止了当前请求的执行\n### 501 Not Implemented \n服务器没有相应的执行动作来完成当前请求。\n### 502 Bad Gateway\nWeb 服务器用作网关或代理服务器时收到了无效响应。\n### 503 Service Unavailable \n因为临时文件超载导致服务器不能处理当前请求。\n### 504 Gateway Timeout\n网关访问超时。\n### 505 Http Version Not Supported\nHTTP 版本不受支持。\n\n```\n\"100\" : Continue\n\"101\" : witching Protocols\n\"200\" : OK\n\"201\" : Created\n\"202\" : Accepted\n\"203\" : Non-Authoritative Information\n\"204\" : No Content\n\"205\" : Reset Content\n\"206\" : Partial Content\n\"300\" : Multiple Choices\n\"301\" : Moved Permanently\n\"302\" : Found\n\"303\" : See Other\n\"304\" : Not Modified\n\"305\" : Use Proxy\n\"307\" : Temporary Redirect\n\"400\" : Bad Request\n\"401\" : Unauthorized\n\"402\" : Payment Required\n\"403\" : Forbidden\n\"404\" : Not Found\n\"405\" : Method Not Allowed\n\"406\" : Not Acceptable\n\"407\" : Proxy Authentication Required\n\"408\" : Request Time-out\n\"409\" : Conflict\n\"410\" : Gone\n\"411\" : Length Required\n\"412\" : Precondition Failed\n\"413\" : Request Entity Too Large\n\"414\" : Request-URI Too Large\n\"415\" : Unsupported Media Type\n\"416\" : Requested range not satisfiable\n\"417\" : Expectation Failed\n\"500\" : Internal Server Error\n\"501\" : Not Implemented\n\"502\" : Bad Gateway\n\"503\" : Service Unavailable\n\"504\" : Gateway Time-out\n\"505\" : HTTP Version not supported\n```\n","slug":"http-status-code","published":1,"comments":1,"layout":"post","photos":[],"link":"","_id":"ck2msmdb5000fm52edfwamu3o","content":"<p>当用户试图通过HTTP或FTP协议访问一台运行主机上的内容时，Web服务器返回一个表示该请求的状态的数字代码。该状态代码记录在服务器日志中，同时也可能在 Web 浏览器或 FTP客户端显示。也就是我们打开页面发生错误时浏览器显示的错误信息代码。状态代码可以指明具体请求是否已成功，还可以揭示请求失败的确切原因。<br>HTTP协议状态码表示的意思主要分为五类 ,大体是 :</p>\n<pre><code>1×× 　　保留\n2×× 　　表示请求成功地接收\n3×× 　　为完成请求客户需进一步细化请求\n4×× 　　客户错误\n5×× 　　服务器错误\n</code></pre><a id=\"more\"></a>\n<h3 id=\"100-Continue\"><a href=\"#100-Continue\" class=\"headerlink\" title=\"100 Continue\"></a>100 Continue</h3><p>指示客户端应该继续请求。回送用于通知客户端此次请求已经收到，并且没有被服务器拒绝。<br>客户端应该继续发送剩下的请求数据或者请求已经完成，或者忽略回送数据。服务器必须发送<br>最后的回送在请求之后。</p>\n<h3 id=\"101-Switching-Protocols\"><a href=\"#101-Switching-Protocols\" class=\"headerlink\" title=\"101 Switching Protocols\"></a>101 Switching Protocols</h3><p>服务器依照客服端请求，通过Upgrade头信息，改变当前连接的应用协议。服务器将根据Upgrade头立刻改变协议<br>在101回送以空行结束的时候。</p>\n<h1 id=\"Successful\"><a href=\"#Successful\" class=\"headerlink\" title=\"Successful\"></a>Successful</h1><h3 id=\"200-OK\"><a href=\"#200-OK\" class=\"headerlink\" title=\"200 OK\"></a>200 OK</h3><p>指示客服端的请求已经成功收到，解析，接受。</p>\n<h3 id=\"201-Created\"><a href=\"#201-Created\" class=\"headerlink\" title=\"201 Created\"></a>201 Created</h3><p>请求已经完成并一个新的返回资源被创建。被创建的资源可能是一个URI资源，通常URI资源在Location头指定。回送应该包含一个实体数据<br>并且包含资源特性以及location通过用户或者用户代理来选择合适的方法。实体数据格式通过煤体类型来指定即content-type头。最开始服务 器<br>必须创建指定的资源在返回201状态码之前。如果行为没有被立刻执行，服务器应该返回202。</p>\n<h3 id=\"202-Accepted\"><a href=\"#202-Accepted\" class=\"headerlink\" title=\"202 Accepted\"></a>202 Accepted</h3><p>请求已经被接受用来处理。但是处理并没有完成。请求可能或者根本没有遵照执行，因为处理实际执行过程中可能被拒绝。</p>\n<h3 id=\"203-Non-Authoritative-Information\"><a href=\"#203-Non-Authoritative-Information\" class=\"headerlink\" title=\"203 Non-Authoritative Information\"></a>203 Non-Authoritative Information</h3><p>不是权威性信息。</p>\n<h3 id=\"204-No-Content\"><a href=\"#204-No-Content\" class=\"headerlink\" title=\"204 No Content\"></a>204 No Content</h3><p>服务器已经接受请求并且没必要返回实体数据，可能需要返回更新信息。回送可能包含新的或更新信息由entity-headers呈现。</p>\n<h3 id=\"205-Reset-Content\"><a href=\"#205-Reset-Content\" class=\"headerlink\" title=\"205 Reset Content\"></a>205 Reset Content</h3><p>服务器已经接受请求并且用户代理应该重新设置文档视图。</p>\n<h3 id=\"206-Partial-Content\"><a href=\"#206-Partial-Content\" class=\"headerlink\" title=\"206 Partial Content\"></a>206 Partial Content</h3><p>服务器已经接受请求GET请求资源的部分。请求必须包含一个Range头信息以指示获取范围可能必须包含If-Range头信息以成立请求条件。</p>\n<h1 id=\"Redirection\"><a href=\"#Redirection\" class=\"headerlink\" title=\"Redirection\"></a>Redirection</h1><h3 id=\"300-Multiple-Choices\"><a href=\"#300-Multiple-Choices\" class=\"headerlink\" title=\"300 Multiple Choices\"></a>300 Multiple Choices</h3><p>请求资源符合任何一个呈现方式。</p>\n<h3 id=\"301-Moved-Permanently\"><a href=\"#301-Moved-Permanently\" class=\"headerlink\" title=\"301 Moved Permanently\"></a>301 Moved Permanently</h3><p>请求的资源已经被赋予一个新的URI。</p>\n<h3 id=\"302-Found\"><a href=\"#302-Found\" class=\"headerlink\" title=\"302 Found\"></a>302 Found</h3><p>通过不同的URI请求资源的临时文件。</p>\n<h3 id=\"303-See-Other\"><a href=\"#303-See-Other\" class=\"headerlink\" title=\"303 See Other\"></a>303 See Other</h3><h3 id=\"304-Not-Modified\"><a href=\"#304-Not-Modified\" class=\"headerlink\" title=\"304 Not Modified\"></a>304 Not Modified</h3><p>如果客服端已经完成一个有条件的请求并且请求是允许的，但是这个文档并没有改变，服务器应该返回304状态码。304<br>状态码一定不能包含信息主体，从而通常通过一个头字段后的第一个空行结束。</p>\n<h3 id=\"305-Use-Proxy\"><a href=\"#305-Use-Proxy\" class=\"headerlink\" title=\"305 Use Proxy\"></a>305 Use Proxy</h3><p>请求的资源必须通过代理（由Location字段指定）来访问。Location资源给出了代理的URI。</p>\n<h3 id=\"306-Unused\"><a href=\"#306-Unused\" class=\"headerlink\" title=\"306 Unused\"></a>306 Unused</h3><h3 id=\"307-Temporary-Redirect\"><a href=\"#307-Temporary-Redirect\" class=\"headerlink\" title=\"307 Temporary Redirect\"></a>307 Temporary Redirect</h3><p>临时重定向。</p>\n<h1 id=\"Client-Error\"><a href=\"#Client-Error\" class=\"headerlink\" title=\"Client Error\"></a>Client Error</h1><h3 id=\"400-Bad-Request\"><a href=\"#400-Bad-Request\" class=\"headerlink\" title=\"400 Bad Request\"></a>400 Bad Request</h3><p>因为错误的语法导致服务器无法理解请求信息。</p>\n<h3 id=\"401-Unauthorized\"><a href=\"#401-Unauthorized\" class=\"headerlink\" title=\"401 Unauthorized\"></a>401 Unauthorized</h3><p>如果请求需要用户验证。回送应该包含一个WWW-Authenticate头字段用来指明请求资源的权限。</p>\n<h3 id=\"402-Payment-Required\"><a href=\"#402-Payment-Required\" class=\"headerlink\" title=\"402 Payment Required\"></a>402 Payment Required</h3><p>保留状态码。</p>\n<h3 id=\"403-Forbidden\"><a href=\"#403-Forbidden\" class=\"headerlink\" title=\"403 Forbidden\"></a>403 Forbidden</h3><p>服务器接受请求，但是被拒绝处理。</p>\n<h3 id=\"404-Not-Found\"><a href=\"#404-Not-Found\" class=\"headerlink\" title=\"404 Not Found\"></a>404 Not Found</h3><p>服务器已经找到任何匹配Request-URI的资源。</p>\n<h3 id=\"405-Menthod-Not-Allowed\"><a href=\"#405-Menthod-Not-Allowed\" class=\"headerlink\" title=\"405 Menthod Not Allowed\"></a>405 Menthod Not Allowed</h3><p>Request-Line 请求的方法不被允许通过指定的URI。</p>\n<h3 id=\"406-Not-Acceptable\"><a href=\"#406-Not-Acceptable\" class=\"headerlink\" title=\"406 Not Acceptable\"></a>406 Not Acceptable</h3><p>客户端浏览器不接受所请求页面的 MIME 类型。</p>\n<h3 id=\"407-Proxy-Authentication-Required\"><a href=\"#407-Proxy-Authentication-Required\" class=\"headerlink\" title=\"407 Proxy Authentication Required\"></a>407 Proxy Authentication Required</h3><p>要求进行代理身份验证。</p>\n<h3 id=\"408-Reqeust-Timeout\"><a href=\"#408-Reqeust-Timeout\" class=\"headerlink\" title=\"408 Reqeust Timeout\"></a>408 Reqeust Timeout</h3><p>客服端没有提交任何请求在服务器等待处理时间内。</p>\n<h3 id=\"409-Conflict\"><a href=\"#409-Conflict\" class=\"headerlink\" title=\"409 Conflict\"></a>409 Conflict</h3><h3 id=\"410-Gone\"><a href=\"#410-Gone\" class=\"headerlink\" title=\"410 Gone\"></a>410 Gone</h3><h3 id=\"411-Length-Required\"><a href=\"#411-Length-Required\" class=\"headerlink\" title=\"411 Length Required\"></a>411 Length Required</h3><p>服务器拒绝接受请求在没有定义Content-Length字段的情况下。</p>\n<h3 id=\"412-Precondition-Failed\"><a href=\"#412-Precondition-Failed\" class=\"headerlink\" title=\"412 Precondition Failed\"></a>412 Precondition Failed</h3><p>前提条件失败。</p>\n<h3 id=\"413-Request-Entity-Too-Large\"><a href=\"#413-Request-Entity-Too-Large\" class=\"headerlink\" title=\"413 Request Entity Too Large\"></a>413 Request Entity Too Large</h3><p>服务器拒绝处理请求因为请求数据超过服务器能够处理的范围。服务器可能关闭当前连接来阻止客服端继续请求。</p>\n<h3 id=\"414-Request-URI-Too-Long\"><a href=\"#414-Request-URI-Too-Long\" class=\"headerlink\" title=\"414 Request-URI Too Long\"></a>414 Request-URI Too Long</h3><p>服务器拒绝服务当前请求因为URI的长度超过了服务器的解析范围。</p>\n<h3 id=\"415-Unsupported-Media-Type\"><a href=\"#415-Unsupported-Media-Type\" class=\"headerlink\" title=\"415 Unsupported Media Type\"></a>415 Unsupported Media Type</h3><p>服务器拒绝服务当前请求因为请求数据格式并不被请求的资源支持。</p>\n<h3 id=\"416-Request-Range-Not-Satisfialbe\"><a href=\"#416-Request-Range-Not-Satisfialbe\" class=\"headerlink\" title=\"416 Request Range Not Satisfialbe\"></a>416 Request Range Not Satisfialbe</h3><p>所请求的范围无法满足。</p>\n<h3 id=\"417-Expectation-Failed\"><a href=\"#417-Expectation-Failed\" class=\"headerlink\" title=\"417 Expectation Failed\"></a>417 Expectation Failed</h3><p>执行失败。</p>\n<h1 id=\"Server-Error\"><a href=\"#Server-Error\" class=\"headerlink\" title=\"Server Error\"></a>Server Error</h1><h3 id=\"500-Internal-Server-Error\"><a href=\"#500-Internal-Server-Error\" class=\"headerlink\" title=\"500 Internal Server Error\"></a>500 Internal Server Error</h3><p>服务器遭遇异常阻止了当前请求的执行</p>\n<h3 id=\"501-Not-Implemented\"><a href=\"#501-Not-Implemented\" class=\"headerlink\" title=\"501 Not Implemented\"></a>501 Not Implemented</h3><p>服务器没有相应的执行动作来完成当前请求。</p>\n<h3 id=\"502-Bad-Gateway\"><a href=\"#502-Bad-Gateway\" class=\"headerlink\" title=\"502 Bad Gateway\"></a>502 Bad Gateway</h3><p>Web 服务器用作网关或代理服务器时收到了无效响应。</p>\n<h3 id=\"503-Service-Unavailable\"><a href=\"#503-Service-Unavailable\" class=\"headerlink\" title=\"503 Service Unavailable\"></a>503 Service Unavailable</h3><p>因为临时文件超载导致服务器不能处理当前请求。</p>\n<h3 id=\"504-Gateway-Timeout\"><a href=\"#504-Gateway-Timeout\" class=\"headerlink\" title=\"504 Gateway Timeout\"></a>504 Gateway Timeout</h3><p>网关访问超时。</p>\n<h3 id=\"505-Http-Version-Not-Supported\"><a href=\"#505-Http-Version-Not-Supported\" class=\"headerlink\" title=\"505 Http Version Not Supported\"></a>505 Http Version Not Supported</h3><p>HTTP 版本不受支持。</p>\n<pre><code>&quot;100&quot; : Continue\n&quot;101&quot; : witching Protocols\n&quot;200&quot; : OK\n&quot;201&quot; : Created\n&quot;202&quot; : Accepted\n&quot;203&quot; : Non-Authoritative Information\n&quot;204&quot; : No Content\n&quot;205&quot; : Reset Content\n&quot;206&quot; : Partial Content\n&quot;300&quot; : Multiple Choices\n&quot;301&quot; : Moved Permanently\n&quot;302&quot; : Found\n&quot;303&quot; : See Other\n&quot;304&quot; : Not Modified\n&quot;305&quot; : Use Proxy\n&quot;307&quot; : Temporary Redirect\n&quot;400&quot; : Bad Request\n&quot;401&quot; : Unauthorized\n&quot;402&quot; : Payment Required\n&quot;403&quot; : Forbidden\n&quot;404&quot; : Not Found\n&quot;405&quot; : Method Not Allowed\n&quot;406&quot; : Not Acceptable\n&quot;407&quot; : Proxy Authentication Required\n&quot;408&quot; : Request Time-out\n&quot;409&quot; : Conflict\n&quot;410&quot; : Gone\n&quot;411&quot; : Length Required\n&quot;412&quot; : Precondition Failed\n&quot;413&quot; : Request Entity Too Large\n&quot;414&quot; : Request-URI Too Large\n&quot;415&quot; : Unsupported Media Type\n&quot;416&quot; : Requested range not satisfiable\n&quot;417&quot; : Expectation Failed\n&quot;500&quot; : Internal Server Error\n&quot;501&quot; : Not Implemented\n&quot;502&quot; : Bad Gateway\n&quot;503&quot; : Service Unavailable\n&quot;504&quot; : Gateway Time-out\n&quot;505&quot; : HTTP Version not supported\n</code></pre>","site":{"data":{}},"excerpt":"<p>当用户试图通过HTTP或FTP协议访问一台运行主机上的内容时，Web服务器返回一个表示该请求的状态的数字代码。该状态代码记录在服务器日志中，同时也可能在 Web 浏览器或 FTP客户端显示。也就是我们打开页面发生错误时浏览器显示的错误信息代码。状态代码可以指明具体请求是否已成功，还可以揭示请求失败的确切原因。<br>HTTP协议状态码表示的意思主要分为五类 ,大体是 :</p>\n<pre><code>1×× 　　保留\n2×× 　　表示请求成功地接收\n3×× 　　为完成请求客户需进一步细化请求\n4×× 　　客户错误\n5×× 　　服务器错误\n</code></pre>","more":"<h3 id=\"100-Continue\"><a href=\"#100-Continue\" class=\"headerlink\" title=\"100 Continue\"></a>100 Continue</h3><p>指示客户端应该继续请求。回送用于通知客户端此次请求已经收到，并且没有被服务器拒绝。<br>客户端应该继续发送剩下的请求数据或者请求已经完成，或者忽略回送数据。服务器必须发送<br>最后的回送在请求之后。</p>\n<h3 id=\"101-Switching-Protocols\"><a href=\"#101-Switching-Protocols\" class=\"headerlink\" title=\"101 Switching Protocols\"></a>101 Switching Protocols</h3><p>服务器依照客服端请求，通过Upgrade头信息，改变当前连接的应用协议。服务器将根据Upgrade头立刻改变协议<br>在101回送以空行结束的时候。</p>\n<h1 id=\"Successful\"><a href=\"#Successful\" class=\"headerlink\" title=\"Successful\"></a>Successful</h1><h3 id=\"200-OK\"><a href=\"#200-OK\" class=\"headerlink\" title=\"200 OK\"></a>200 OK</h3><p>指示客服端的请求已经成功收到，解析，接受。</p>\n<h3 id=\"201-Created\"><a href=\"#201-Created\" class=\"headerlink\" title=\"201 Created\"></a>201 Created</h3><p>请求已经完成并一个新的返回资源被创建。被创建的资源可能是一个URI资源，通常URI资源在Location头指定。回送应该包含一个实体数据<br>并且包含资源特性以及location通过用户或者用户代理来选择合适的方法。实体数据格式通过煤体类型来指定即content-type头。最开始服务 器<br>必须创建指定的资源在返回201状态码之前。如果行为没有被立刻执行，服务器应该返回202。</p>\n<h3 id=\"202-Accepted\"><a href=\"#202-Accepted\" class=\"headerlink\" title=\"202 Accepted\"></a>202 Accepted</h3><p>请求已经被接受用来处理。但是处理并没有完成。请求可能或者根本没有遵照执行，因为处理实际执行过程中可能被拒绝。</p>\n<h3 id=\"203-Non-Authoritative-Information\"><a href=\"#203-Non-Authoritative-Information\" class=\"headerlink\" title=\"203 Non-Authoritative Information\"></a>203 Non-Authoritative Information</h3><p>不是权威性信息。</p>\n<h3 id=\"204-No-Content\"><a href=\"#204-No-Content\" class=\"headerlink\" title=\"204 No Content\"></a>204 No Content</h3><p>服务器已经接受请求并且没必要返回实体数据，可能需要返回更新信息。回送可能包含新的或更新信息由entity-headers呈现。</p>\n<h3 id=\"205-Reset-Content\"><a href=\"#205-Reset-Content\" class=\"headerlink\" title=\"205 Reset Content\"></a>205 Reset Content</h3><p>服务器已经接受请求并且用户代理应该重新设置文档视图。</p>\n<h3 id=\"206-Partial-Content\"><a href=\"#206-Partial-Content\" class=\"headerlink\" title=\"206 Partial Content\"></a>206 Partial Content</h3><p>服务器已经接受请求GET请求资源的部分。请求必须包含一个Range头信息以指示获取范围可能必须包含If-Range头信息以成立请求条件。</p>\n<h1 id=\"Redirection\"><a href=\"#Redirection\" class=\"headerlink\" title=\"Redirection\"></a>Redirection</h1><h3 id=\"300-Multiple-Choices\"><a href=\"#300-Multiple-Choices\" class=\"headerlink\" title=\"300 Multiple Choices\"></a>300 Multiple Choices</h3><p>请求资源符合任何一个呈现方式。</p>\n<h3 id=\"301-Moved-Permanently\"><a href=\"#301-Moved-Permanently\" class=\"headerlink\" title=\"301 Moved Permanently\"></a>301 Moved Permanently</h3><p>请求的资源已经被赋予一个新的URI。</p>\n<h3 id=\"302-Found\"><a href=\"#302-Found\" class=\"headerlink\" title=\"302 Found\"></a>302 Found</h3><p>通过不同的URI请求资源的临时文件。</p>\n<h3 id=\"303-See-Other\"><a href=\"#303-See-Other\" class=\"headerlink\" title=\"303 See Other\"></a>303 See Other</h3><h3 id=\"304-Not-Modified\"><a href=\"#304-Not-Modified\" class=\"headerlink\" title=\"304 Not Modified\"></a>304 Not Modified</h3><p>如果客服端已经完成一个有条件的请求并且请求是允许的，但是这个文档并没有改变，服务器应该返回304状态码。304<br>状态码一定不能包含信息主体，从而通常通过一个头字段后的第一个空行结束。</p>\n<h3 id=\"305-Use-Proxy\"><a href=\"#305-Use-Proxy\" class=\"headerlink\" title=\"305 Use Proxy\"></a>305 Use Proxy</h3><p>请求的资源必须通过代理（由Location字段指定）来访问。Location资源给出了代理的URI。</p>\n<h3 id=\"306-Unused\"><a href=\"#306-Unused\" class=\"headerlink\" title=\"306 Unused\"></a>306 Unused</h3><h3 id=\"307-Temporary-Redirect\"><a href=\"#307-Temporary-Redirect\" class=\"headerlink\" title=\"307 Temporary Redirect\"></a>307 Temporary Redirect</h3><p>临时重定向。</p>\n<h1 id=\"Client-Error\"><a href=\"#Client-Error\" class=\"headerlink\" title=\"Client Error\"></a>Client Error</h1><h3 id=\"400-Bad-Request\"><a href=\"#400-Bad-Request\" class=\"headerlink\" title=\"400 Bad Request\"></a>400 Bad Request</h3><p>因为错误的语法导致服务器无法理解请求信息。</p>\n<h3 id=\"401-Unauthorized\"><a href=\"#401-Unauthorized\" class=\"headerlink\" title=\"401 Unauthorized\"></a>401 Unauthorized</h3><p>如果请求需要用户验证。回送应该包含一个WWW-Authenticate头字段用来指明请求资源的权限。</p>\n<h3 id=\"402-Payment-Required\"><a href=\"#402-Payment-Required\" class=\"headerlink\" title=\"402 Payment Required\"></a>402 Payment Required</h3><p>保留状态码。</p>\n<h3 id=\"403-Forbidden\"><a href=\"#403-Forbidden\" class=\"headerlink\" title=\"403 Forbidden\"></a>403 Forbidden</h3><p>服务器接受请求，但是被拒绝处理。</p>\n<h3 id=\"404-Not-Found\"><a href=\"#404-Not-Found\" class=\"headerlink\" title=\"404 Not Found\"></a>404 Not Found</h3><p>服务器已经找到任何匹配Request-URI的资源。</p>\n<h3 id=\"405-Menthod-Not-Allowed\"><a href=\"#405-Menthod-Not-Allowed\" class=\"headerlink\" title=\"405 Menthod Not Allowed\"></a>405 Menthod Not Allowed</h3><p>Request-Line 请求的方法不被允许通过指定的URI。</p>\n<h3 id=\"406-Not-Acceptable\"><a href=\"#406-Not-Acceptable\" class=\"headerlink\" title=\"406 Not Acceptable\"></a>406 Not Acceptable</h3><p>客户端浏览器不接受所请求页面的 MIME 类型。</p>\n<h3 id=\"407-Proxy-Authentication-Required\"><a href=\"#407-Proxy-Authentication-Required\" class=\"headerlink\" title=\"407 Proxy Authentication Required\"></a>407 Proxy Authentication Required</h3><p>要求进行代理身份验证。</p>\n<h3 id=\"408-Reqeust-Timeout\"><a href=\"#408-Reqeust-Timeout\" class=\"headerlink\" title=\"408 Reqeust Timeout\"></a>408 Reqeust Timeout</h3><p>客服端没有提交任何请求在服务器等待处理时间内。</p>\n<h3 id=\"409-Conflict\"><a href=\"#409-Conflict\" class=\"headerlink\" title=\"409 Conflict\"></a>409 Conflict</h3><h3 id=\"410-Gone\"><a href=\"#410-Gone\" class=\"headerlink\" title=\"410 Gone\"></a>410 Gone</h3><h3 id=\"411-Length-Required\"><a href=\"#411-Length-Required\" class=\"headerlink\" title=\"411 Length Required\"></a>411 Length Required</h3><p>服务器拒绝接受请求在没有定义Content-Length字段的情况下。</p>\n<h3 id=\"412-Precondition-Failed\"><a href=\"#412-Precondition-Failed\" class=\"headerlink\" title=\"412 Precondition Failed\"></a>412 Precondition Failed</h3><p>前提条件失败。</p>\n<h3 id=\"413-Request-Entity-Too-Large\"><a href=\"#413-Request-Entity-Too-Large\" class=\"headerlink\" title=\"413 Request Entity Too Large\"></a>413 Request Entity Too Large</h3><p>服务器拒绝处理请求因为请求数据超过服务器能够处理的范围。服务器可能关闭当前连接来阻止客服端继续请求。</p>\n<h3 id=\"414-Request-URI-Too-Long\"><a href=\"#414-Request-URI-Too-Long\" class=\"headerlink\" title=\"414 Request-URI Too Long\"></a>414 Request-URI Too Long</h3><p>服务器拒绝服务当前请求因为URI的长度超过了服务器的解析范围。</p>\n<h3 id=\"415-Unsupported-Media-Type\"><a href=\"#415-Unsupported-Media-Type\" class=\"headerlink\" title=\"415 Unsupported Media Type\"></a>415 Unsupported Media Type</h3><p>服务器拒绝服务当前请求因为请求数据格式并不被请求的资源支持。</p>\n<h3 id=\"416-Request-Range-Not-Satisfialbe\"><a href=\"#416-Request-Range-Not-Satisfialbe\" class=\"headerlink\" title=\"416 Request Range Not Satisfialbe\"></a>416 Request Range Not Satisfialbe</h3><p>所请求的范围无法满足。</p>\n<h3 id=\"417-Expectation-Failed\"><a href=\"#417-Expectation-Failed\" class=\"headerlink\" title=\"417 Expectation Failed\"></a>417 Expectation Failed</h3><p>执行失败。</p>\n<h1 id=\"Server-Error\"><a href=\"#Server-Error\" class=\"headerlink\" title=\"Server Error\"></a>Server Error</h1><h3 id=\"500-Internal-Server-Error\"><a href=\"#500-Internal-Server-Error\" class=\"headerlink\" title=\"500 Internal Server Error\"></a>500 Internal Server Error</h3><p>服务器遭遇异常阻止了当前请求的执行</p>\n<h3 id=\"501-Not-Implemented\"><a href=\"#501-Not-Implemented\" class=\"headerlink\" title=\"501 Not Implemented\"></a>501 Not Implemented</h3><p>服务器没有相应的执行动作来完成当前请求。</p>\n<h3 id=\"502-Bad-Gateway\"><a href=\"#502-Bad-Gateway\" class=\"headerlink\" title=\"502 Bad Gateway\"></a>502 Bad Gateway</h3><p>Web 服务器用作网关或代理服务器时收到了无效响应。</p>\n<h3 id=\"503-Service-Unavailable\"><a href=\"#503-Service-Unavailable\" class=\"headerlink\" title=\"503 Service Unavailable\"></a>503 Service Unavailable</h3><p>因为临时文件超载导致服务器不能处理当前请求。</p>\n<h3 id=\"504-Gateway-Timeout\"><a href=\"#504-Gateway-Timeout\" class=\"headerlink\" title=\"504 Gateway Timeout\"></a>504 Gateway Timeout</h3><p>网关访问超时。</p>\n<h3 id=\"505-Http-Version-Not-Supported\"><a href=\"#505-Http-Version-Not-Supported\" class=\"headerlink\" title=\"505 Http Version Not Supported\"></a>505 Http Version Not Supported</h3><p>HTTP 版本不受支持。</p>\n<pre><code>&quot;100&quot; : Continue\n&quot;101&quot; : witching Protocols\n&quot;200&quot; : OK\n&quot;201&quot; : Created\n&quot;202&quot; : Accepted\n&quot;203&quot; : Non-Authoritative Information\n&quot;204&quot; : No Content\n&quot;205&quot; : Reset Content\n&quot;206&quot; : Partial Content\n&quot;300&quot; : Multiple Choices\n&quot;301&quot; : Moved Permanently\n&quot;302&quot; : Found\n&quot;303&quot; : See Other\n&quot;304&quot; : Not Modified\n&quot;305&quot; : Use Proxy\n&quot;307&quot; : Temporary Redirect\n&quot;400&quot; : Bad Request\n&quot;401&quot; : Unauthorized\n&quot;402&quot; : Payment Required\n&quot;403&quot; : Forbidden\n&quot;404&quot; : Not Found\n&quot;405&quot; : Method Not Allowed\n&quot;406&quot; : Not Acceptable\n&quot;407&quot; : Proxy Authentication Required\n&quot;408&quot; : Request Time-out\n&quot;409&quot; : Conflict\n&quot;410&quot; : Gone\n&quot;411&quot; : Length Required\n&quot;412&quot; : Precondition Failed\n&quot;413&quot; : Request Entity Too Large\n&quot;414&quot; : Request-URI Too Large\n&quot;415&quot; : Unsupported Media Type\n&quot;416&quot; : Requested range not satisfiable\n&quot;417&quot; : Expectation Failed\n&quot;500&quot; : Internal Server Error\n&quot;501&quot; : Not Implemented\n&quot;502&quot; : Bad Gateway\n&quot;503&quot; : Service Unavailable\n&quot;504&quot; : Gateway Time-out\n&quot;505&quot; : HTTP Version not supported\n</code></pre>"},{"title":"markdown","date":"2019-06-05T03:13:18.000Z","_content":"\n```\n#一、标题写法：\n第一种方法：\n1、在文本下面加上 等于号 = ，那么上方的文本就变成了大标题。等于号的个数无限制，但一定要大于0个哦。。\n2、在文本下面加上 下划线 - ，那么上方的文本就变成了中标题，同样的 下划线个数无限制。\n3、要想输入=号，上面有文本而不让其转化为大标题，则需要在两者之间加一个空行。\n另一种方法：（推荐这种方法；注意⚠️中间需要有一个空格）\n关于标题还有等级表示法，分为六个等级，显示的文本大小依次减小。不同等级之间是以井号  #  的个数来标识的。一级标题有一个 #，二级标题有两个# ，以此类推。\n例如：\n# 一级标题  \n## 二级标题  \n### 三级标题  \n#### 四级标题  \n##### 五级标题  \n###### 六级标题 \n二、编辑基本语法  \n1、字体格式强调\n 我们可以使用下面的方式给我们的文本添加强调的效果\n*强调*  (示例：斜体)  \n _强调_  (示例：斜体)  \n**加重强调**  (示例：粗体)  \n __加重强调__ (示例：粗体)  \n***特别强调*** (示例：粗斜体)  \n___特别强调___  (示例：粗斜体)  \n2、代码  \n`<hello world>`  \n\n3、代码块高亮\n(```)\n@Override\nprotected void onDestroy() {\n    EventBus.getDefault().unregister(this);\n    super.onDestroy();\n}\n(```)\n\n4、表格 （建议在表格前空一行，否则可能影响表格无法显示）\n \n 表头  | 表头  | 表头\n ---- | ----- | ------  \n 单元格内容  | 单元格内容 | 单元格内容 \n 单元格内容  | 单元格内容 | 单元格内容  \n \n5、其他引用\n图片  \n![图片名称](https://www.baidu.com/img/bd_logo1.png)  \n链接  \n[链接名称](https://www.baidu.com/)    \n6、列表 \n1. 项目1  \n2. 项目2  \n3. 项目3  \n   * 项目1 （一个*号会显示为一个黑点，注意⚠️有空格，否则直接显示为*项目1） \n   * 项目2   \n \n7、换行（建议直接在前一行后面补两个空格）\n直接回车不能换行，  \n可以在上一行文本后面补两个空格，  \n这样下一行的文本就换行了。\n或者就是在两行文本直接加一个空行。\n也能实现换行效果，不过这个行间距有点大。  \n \n8、引用\n> 第一行引用文字  \n> 第二行引用文字  \n\n```\n","source":"_posts/markdown.md","raw":"---\ntitle: markdown\ndate: 2019-06-05 11:13:18\ntags: \n- docs\n- markdown\n\ncategories:\n- docs\n---\n\n```\n#一、标题写法：\n第一种方法：\n1、在文本下面加上 等于号 = ，那么上方的文本就变成了大标题。等于号的个数无限制，但一定要大于0个哦。。\n2、在文本下面加上 下划线 - ，那么上方的文本就变成了中标题，同样的 下划线个数无限制。\n3、要想输入=号，上面有文本而不让其转化为大标题，则需要在两者之间加一个空行。\n另一种方法：（推荐这种方法；注意⚠️中间需要有一个空格）\n关于标题还有等级表示法，分为六个等级，显示的文本大小依次减小。不同等级之间是以井号  #  的个数来标识的。一级标题有一个 #，二级标题有两个# ，以此类推。\n例如：\n# 一级标题  \n## 二级标题  \n### 三级标题  \n#### 四级标题  \n##### 五级标题  \n###### 六级标题 \n二、编辑基本语法  \n1、字体格式强调\n 我们可以使用下面的方式给我们的文本添加强调的效果\n*强调*  (示例：斜体)  \n _强调_  (示例：斜体)  \n**加重强调**  (示例：粗体)  \n __加重强调__ (示例：粗体)  \n***特别强调*** (示例：粗斜体)  \n___特别强调___  (示例：粗斜体)  \n2、代码  \n`<hello world>`  \n\n3、代码块高亮\n(```)\n@Override\nprotected void onDestroy() {\n    EventBus.getDefault().unregister(this);\n    super.onDestroy();\n}\n(```)\n\n4、表格 （建议在表格前空一行，否则可能影响表格无法显示）\n \n 表头  | 表头  | 表头\n ---- | ----- | ------  \n 单元格内容  | 单元格内容 | 单元格内容 \n 单元格内容  | 单元格内容 | 单元格内容  \n \n5、其他引用\n图片  \n![图片名称](https://www.baidu.com/img/bd_logo1.png)  \n链接  \n[链接名称](https://www.baidu.com/)    \n6、列表 \n1. 项目1  \n2. 项目2  \n3. 项目3  \n   * 项目1 （一个*号会显示为一个黑点，注意⚠️有空格，否则直接显示为*项目1） \n   * 项目2   \n \n7、换行（建议直接在前一行后面补两个空格）\n直接回车不能换行，  \n可以在上一行文本后面补两个空格，  \n这样下一行的文本就换行了。\n或者就是在两行文本直接加一个空行。\n也能实现换行效果，不过这个行间距有点大。  \n \n8、引用\n> 第一行引用文字  \n> 第二行引用文字  \n\n```\n","slug":"markdown","published":1,"updated":"2019-06-05T04:38:33.760Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2msmdb6000hm52e0m14ii9n","content":"<pre><code>#一、标题写法：\n第一种方法：\n1、在文本下面加上 等于号 = ，那么上方的文本就变成了大标题。等于号的个数无限制，但一定要大于0个哦。。\n2、在文本下面加上 下划线 - ，那么上方的文本就变成了中标题，同样的 下划线个数无限制。\n3、要想输入=号，上面有文本而不让其转化为大标题，则需要在两者之间加一个空行。\n另一种方法：（推荐这种方法；注意⚠️中间需要有一个空格）\n关于标题还有等级表示法，分为六个等级，显示的文本大小依次减小。不同等级之间是以井号  #  的个数来标识的。一级标题有一个 #，二级标题有两个# ，以此类推。\n例如：\n# 一级标题  \n## 二级标题  \n### 三级标题  \n#### 四级标题  \n##### 五级标题  \n###### 六级标题 \n二、编辑基本语法  \n1、字体格式强调\n 我们可以使用下面的方式给我们的文本添加强调的效果\n*强调*  (示例：斜体)  \n _强调_  (示例：斜体)  \n**加重强调**  (示例：粗体)  \n __加重强调__ (示例：粗体)  \n***特别强调*** (示例：粗斜体)  \n___特别强调___  (示例：粗斜体)  \n2、代码  \n`&lt;hello world&gt;`  \n\n3、代码块高亮\n(```)\n@Override\nprotected void onDestroy() {\n    EventBus.getDefault().unregister(this);\n    super.onDestroy();\n}\n(```)\n\n4、表格 （建议在表格前空一行，否则可能影响表格无法显示）\n\n 表头  | 表头  | 表头\n ---- | ----- | ------  \n 单元格内容  | 单元格内容 | 单元格内容 \n 单元格内容  | 单元格内容 | 单元格内容  \n\n5、其他引用\n图片  \n![图片名称](https://www.baidu.com/img/bd_logo1.png)  \n链接  \n[链接名称](https://www.baidu.com/)    \n6、列表 \n1. 项目1  \n2. 项目2  \n3. 项目3  \n   * 项目1 （一个*号会显示为一个黑点，注意⚠️有空格，否则直接显示为*项目1） \n   * 项目2   \n\n7、换行（建议直接在前一行后面补两个空格）\n直接回车不能换行，  \n可以在上一行文本后面补两个空格，  \n这样下一行的文本就换行了。\n或者就是在两行文本直接加一个空行。\n也能实现换行效果，不过这个行间距有点大。  \n\n8、引用\n&gt; 第一行引用文字  \n&gt; 第二行引用文字  \n\n</code></pre>","site":{"data":{}},"excerpt":"","more":"<pre><code>#一、标题写法：\n第一种方法：\n1、在文本下面加上 等于号 = ，那么上方的文本就变成了大标题。等于号的个数无限制，但一定要大于0个哦。。\n2、在文本下面加上 下划线 - ，那么上方的文本就变成了中标题，同样的 下划线个数无限制。\n3、要想输入=号，上面有文本而不让其转化为大标题，则需要在两者之间加一个空行。\n另一种方法：（推荐这种方法；注意⚠️中间需要有一个空格）\n关于标题还有等级表示法，分为六个等级，显示的文本大小依次减小。不同等级之间是以井号  #  的个数来标识的。一级标题有一个 #，二级标题有两个# ，以此类推。\n例如：\n# 一级标题  \n## 二级标题  \n### 三级标题  \n#### 四级标题  \n##### 五级标题  \n###### 六级标题 \n二、编辑基本语法  \n1、字体格式强调\n 我们可以使用下面的方式给我们的文本添加强调的效果\n*强调*  (示例：斜体)  \n _强调_  (示例：斜体)  \n**加重强调**  (示例：粗体)  \n __加重强调__ (示例：粗体)  \n***特别强调*** (示例：粗斜体)  \n___特别强调___  (示例：粗斜体)  \n2、代码  \n`&lt;hello world&gt;`  \n\n3、代码块高亮\n(```)\n@Override\nprotected void onDestroy() {\n    EventBus.getDefault().unregister(this);\n    super.onDestroy();\n}\n(```)\n\n4、表格 （建议在表格前空一行，否则可能影响表格无法显示）\n\n 表头  | 表头  | 表头\n ---- | ----- | ------  \n 单元格内容  | 单元格内容 | 单元格内容 \n 单元格内容  | 单元格内容 | 单元格内容  \n\n5、其他引用\n图片  \n![图片名称](https://www.baidu.com/img/bd_logo1.png)  \n链接  \n[链接名称](https://www.baidu.com/)    \n6、列表 \n1. 项目1  \n2. 项目2  \n3. 项目3  \n   * 项目1 （一个*号会显示为一个黑点，注意⚠️有空格，否则直接显示为*项目1） \n   * 项目2   \n\n7、换行（建议直接在前一行后面补两个空格）\n直接回车不能换行，  \n可以在上一行文本后面补两个空格，  \n这样下一行的文本就换行了。\n或者就是在两行文本直接加一个空行。\n也能实现换行效果，不过这个行间距有点大。  \n\n8、引用\n&gt; 第一行引用文字  \n&gt; 第二行引用文字  \n\n</code></pre>"},{"title":"mysql距离函数st_distance","date":"2019-06-12T07:58:59.000Z","_content":"\n随着近几年各类移动终端的迅速普及，在手机移动定位app中，附近的人，附近的地点功能十分常见,基于地理位置的服务（LBS）和相关应用也越来越多，而支撑这些应用的最基础技术之一，就是基于地理位置信息的处理。\n\nst_distance 函数 \nst_distance 函数是从mysql5.6.1才加入的。 \nSET @g1 = POINT(1,1), @g2 = POINT(2,2); \nselect st_distance (@g1, @g2); \n输出结果：1.4142135623730951\n```sql\nSELECT st_distance (point (1, 1),point(2,2) ) * 111195 \n```\n\n//输出结果：157253.47706807632 单位：米 \nst_distance 计算的结果单位是度，需要乘111195（地球半径6371000*PI/180）是将值转化为米。\n\n当然你也可以自定义距离函数： \n```sql\nCREATE FUNCTION slc ( \nlat1 DOUBLE, \nlon1 DOUBLE, \nlat2 DOUBLE, \nlon2 DOUBLE \n) RETURNS DOUBLE RETURN 6371 * acos( \ncos(radians(lat1)) * cos(radians(lat2)) * cos( \nradians(lon2) - radians(lon1) \n) + sin(radians(lat1)) * sin(radians(lat2)) \n);\n\nSELECT slc(1,1,2,2) from DUAL \n```\n//输出结果：157.22543203804852 km\n\n应用场景: \n假设我当时的坐标：117.069,35.86 需要查询我附近50KM内服务区，并按照距离由近及远排列 \n```sql\nSELECT \ns.id,s.name,s.lng,s.lat, \n(st_distance (point (lng, lat),point(117.069,35.86) ) *111195) AS distance \nFROM \nroad_servicearea s \nHAVING distance<50 \nORDER BY distance\n```\n知识科普： \n地球是在不停地绕地轴旋转，在地球中腰画一个与地轴垂直的大圆圈，使圈上的每一点都和南北两极的距离相等，这个圆圈就叫作“赤道”。在赤道的南北两边，画出许多和赤道平行的圆圈，就是“纬圈”；构成这些圆圈的线段，叫做纬线。我们把赤道定为纬度零度，向南向北各为90度，在赤道以南的叫南纬，在赤道以北的叫北纬。北极就是北纬90度，南极就是南纬90度。纬度的高低也标志着气候的冷热，如赤道和低纬度地地区无冬，两极和高纬度地区无夏，中纬度地区四季分明。\n\n从北极点到南极点，可以画出许多南北方向的与地球赤道垂直的大圆圈，这叫作“经圈”；构成这些圆圈的线段，就叫经线。公元1884平面坐标图年，国际上规定以通过英国伦敦近郊的格林尼治天文台的经线作为计算经度的起点，即经度零度零分零秒，也称“本初子午线”。在它东面的为东经，共180度； \n在它西面的为西经，共180度。因为地球是圆的，所以东经180度和西经180度的经线是同一条经线。各国公定180度经线为“国际日期变更线”。为了避免同一地区使用两个不同的日期，国际日期变线在遇陆地时略有偏离。每一经度和纬度还可以再细分为60分，每一分再分为60秒以及秒的小数。利用经纬线，我们就可以确定地球上每一个地方的具体位置，并且把它在地图或地球仪上表示出来。\n--------------------- \n","source":"_posts/mysql距离函数st-distance.md","raw":"---\ntitle: mysql距离函数st_distance\ndate: 2019-06-12 15:58:59\ntags:\n- mysql\ncategories:\n- mysql\n---\n\n随着近几年各类移动终端的迅速普及，在手机移动定位app中，附近的人，附近的地点功能十分常见,基于地理位置的服务（LBS）和相关应用也越来越多，而支撑这些应用的最基础技术之一，就是基于地理位置信息的处理。\n\nst_distance 函数 \nst_distance 函数是从mysql5.6.1才加入的。 \nSET @g1 = POINT(1,1), @g2 = POINT(2,2); \nselect st_distance (@g1, @g2); \n输出结果：1.4142135623730951\n```sql\nSELECT st_distance (point (1, 1),point(2,2) ) * 111195 \n```\n\n//输出结果：157253.47706807632 单位：米 \nst_distance 计算的结果单位是度，需要乘111195（地球半径6371000*PI/180）是将值转化为米。\n\n当然你也可以自定义距离函数： \n```sql\nCREATE FUNCTION slc ( \nlat1 DOUBLE, \nlon1 DOUBLE, \nlat2 DOUBLE, \nlon2 DOUBLE \n) RETURNS DOUBLE RETURN 6371 * acos( \ncos(radians(lat1)) * cos(radians(lat2)) * cos( \nradians(lon2) - radians(lon1) \n) + sin(radians(lat1)) * sin(radians(lat2)) \n);\n\nSELECT slc(1,1,2,2) from DUAL \n```\n//输出结果：157.22543203804852 km\n\n应用场景: \n假设我当时的坐标：117.069,35.86 需要查询我附近50KM内服务区，并按照距离由近及远排列 \n```sql\nSELECT \ns.id,s.name,s.lng,s.lat, \n(st_distance (point (lng, lat),point(117.069,35.86) ) *111195) AS distance \nFROM \nroad_servicearea s \nHAVING distance<50 \nORDER BY distance\n```\n知识科普： \n地球是在不停地绕地轴旋转，在地球中腰画一个与地轴垂直的大圆圈，使圈上的每一点都和南北两极的距离相等，这个圆圈就叫作“赤道”。在赤道的南北两边，画出许多和赤道平行的圆圈，就是“纬圈”；构成这些圆圈的线段，叫做纬线。我们把赤道定为纬度零度，向南向北各为90度，在赤道以南的叫南纬，在赤道以北的叫北纬。北极就是北纬90度，南极就是南纬90度。纬度的高低也标志着气候的冷热，如赤道和低纬度地地区无冬，两极和高纬度地区无夏，中纬度地区四季分明。\n\n从北极点到南极点，可以画出许多南北方向的与地球赤道垂直的大圆圈，这叫作“经圈”；构成这些圆圈的线段，就叫经线。公元1884平面坐标图年，国际上规定以通过英国伦敦近郊的格林尼治天文台的经线作为计算经度的起点，即经度零度零分零秒，也称“本初子午线”。在它东面的为东经，共180度； \n在它西面的为西经，共180度。因为地球是圆的，所以东经180度和西经180度的经线是同一条经线。各国公定180度经线为“国际日期变更线”。为了避免同一地区使用两个不同的日期，国际日期变线在遇陆地时略有偏离。每一经度和纬度还可以再细分为60分，每一分再分为60秒以及秒的小数。利用经纬线，我们就可以确定地球上每一个地方的具体位置，并且把它在地图或地球仪上表示出来。\n--------------------- \n","slug":"mysql距离函数st-distance","published":1,"updated":"2019-06-12T08:00:34.908Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2msmdb8000lm52eucbstias","content":"<p>随着近几年各类移动终端的迅速普及，在手机移动定位app中，附近的人，附近的地点功能十分常见,基于地理位置的服务（LBS）和相关应用也越来越多，而支撑这些应用的最基础技术之一，就是基于地理位置信息的处理。</p>\n<p>st_distance 函数<br>st_distance 函数是从mysql5.6.1才加入的。<br>SET @g1 = POINT(1,1), @g2 = POINT(2,2);<br>select st_distance (@g1, @g2);<br>输出结果：1.4142135623730951</p>\n<pre><code class=\"sql\">SELECT st_distance (point (1, 1),point(2,2) ) * 111195 \n</code></pre>\n<p>//输出结果：157253.47706807632 单位：米<br>st_distance 计算的结果单位是度，需要乘111195（地球半径6371000*PI/180）是将值转化为米。</p>\n<p>当然你也可以自定义距离函数： </p>\n<pre><code class=\"sql\">CREATE FUNCTION slc ( \nlat1 DOUBLE, \nlon1 DOUBLE, \nlat2 DOUBLE, \nlon2 DOUBLE \n) RETURNS DOUBLE RETURN 6371 * acos( \ncos(radians(lat1)) * cos(radians(lat2)) * cos( \nradians(lon2) - radians(lon1) \n) + sin(radians(lat1)) * sin(radians(lat2)) \n);\n\nSELECT slc(1,1,2,2) from DUAL \n</code></pre>\n<p>//输出结果：157.22543203804852 km</p>\n<p>应用场景:<br>假设我当时的坐标：117.069,35.86 需要查询我附近50KM内服务区，并按照距离由近及远排列 </p>\n<pre><code class=\"sql\">SELECT \ns.id,s.name,s.lng,s.lat, \n(st_distance (point (lng, lat),point(117.069,35.86) ) *111195) AS distance \nFROM \nroad_servicearea s \nHAVING distance&lt;50 \nORDER BY distance\n</code></pre>\n<p>知识科普：<br>地球是在不停地绕地轴旋转，在地球中腰画一个与地轴垂直的大圆圈，使圈上的每一点都和南北两极的距离相等，这个圆圈就叫作“赤道”。在赤道的南北两边，画出许多和赤道平行的圆圈，就是“纬圈”；构成这些圆圈的线段，叫做纬线。我们把赤道定为纬度零度，向南向北各为90度，在赤道以南的叫南纬，在赤道以北的叫北纬。北极就是北纬90度，南极就是南纬90度。纬度的高低也标志着气候的冷热，如赤道和低纬度地地区无冬，两极和高纬度地区无夏，中纬度地区四季分明。</p>\n<p>从北极点到南极点，可以画出许多南北方向的与地球赤道垂直的大圆圈，这叫作“经圈”；构成这些圆圈的线段，就叫经线。公元1884平面坐标图年，国际上规定以通过英国伦敦近郊的格林尼治天文台的经线作为计算经度的起点，即经度零度零分零秒，也称“本初子午线”。在它东面的为东经，共180度； </p>\n<h2 id=\"在它西面的为西经，共180度。因为地球是圆的，所以东经180度和西经180度的经线是同一条经线。各国公定180度经线为“国际日期变更线”。为了避免同一地区使用两个不同的日期，国际日期变线在遇陆地时略有偏离。每一经度和纬度还可以再细分为60分，每一分再分为60秒以及秒的小数。利用经纬线，我们就可以确定地球上每一个地方的具体位置，并且把它在地图或地球仪上表示出来。\"><a href=\"#在它西面的为西经，共180度。因为地球是圆的，所以东经180度和西经180度的经线是同一条经线。各国公定180度经线为“国际日期变更线”。为了避免同一地区使用两个不同的日期，国际日期变线在遇陆地时略有偏离。每一经度和纬度还可以再细分为60分，每一分再分为60秒以及秒的小数。利用经纬线，我们就可以确定地球上每一个地方的具体位置，并且把它在地图或地球仪上表示出来。\" class=\"headerlink\" title=\"在它西面的为西经，共180度。因为地球是圆的，所以东经180度和西经180度的经线是同一条经线。各国公定180度经线为“国际日期变更线”。为了避免同一地区使用两个不同的日期，国际日期变线在遇陆地时略有偏离。每一经度和纬度还可以再细分为60分，每一分再分为60秒以及秒的小数。利用经纬线，我们就可以确定地球上每一个地方的具体位置，并且把它在地图或地球仪上表示出来。\"></a>在它西面的为西经，共180度。因为地球是圆的，所以东经180度和西经180度的经线是同一条经线。各国公定180度经线为“国际日期变更线”。为了避免同一地区使用两个不同的日期，国际日期变线在遇陆地时略有偏离。每一经度和纬度还可以再细分为60分，每一分再分为60秒以及秒的小数。利用经纬线，我们就可以确定地球上每一个地方的具体位置，并且把它在地图或地球仪上表示出来。</h2>","site":{"data":{}},"excerpt":"","more":"<p>随着近几年各类移动终端的迅速普及，在手机移动定位app中，附近的人，附近的地点功能十分常见,基于地理位置的服务（LBS）和相关应用也越来越多，而支撑这些应用的最基础技术之一，就是基于地理位置信息的处理。</p>\n<p>st_distance 函数<br>st_distance 函数是从mysql5.6.1才加入的。<br>SET @g1 = POINT(1,1), @g2 = POINT(2,2);<br>select st_distance (@g1, @g2);<br>输出结果：1.4142135623730951</p>\n<pre><code class=\"sql\">SELECT st_distance (point (1, 1),point(2,2) ) * 111195 \n</code></pre>\n<p>//输出结果：157253.47706807632 单位：米<br>st_distance 计算的结果单位是度，需要乘111195（地球半径6371000*PI/180）是将值转化为米。</p>\n<p>当然你也可以自定义距离函数： </p>\n<pre><code class=\"sql\">CREATE FUNCTION slc ( \nlat1 DOUBLE, \nlon1 DOUBLE, \nlat2 DOUBLE, \nlon2 DOUBLE \n) RETURNS DOUBLE RETURN 6371 * acos( \ncos(radians(lat1)) * cos(radians(lat2)) * cos( \nradians(lon2) - radians(lon1) \n) + sin(radians(lat1)) * sin(radians(lat2)) \n);\n\nSELECT slc(1,1,2,2) from DUAL \n</code></pre>\n<p>//输出结果：157.22543203804852 km</p>\n<p>应用场景:<br>假设我当时的坐标：117.069,35.86 需要查询我附近50KM内服务区，并按照距离由近及远排列 </p>\n<pre><code class=\"sql\">SELECT \ns.id,s.name,s.lng,s.lat, \n(st_distance (point (lng, lat),point(117.069,35.86) ) *111195) AS distance \nFROM \nroad_servicearea s \nHAVING distance&lt;50 \nORDER BY distance\n</code></pre>\n<p>知识科普：<br>地球是在不停地绕地轴旋转，在地球中腰画一个与地轴垂直的大圆圈，使圈上的每一点都和南北两极的距离相等，这个圆圈就叫作“赤道”。在赤道的南北两边，画出许多和赤道平行的圆圈，就是“纬圈”；构成这些圆圈的线段，叫做纬线。我们把赤道定为纬度零度，向南向北各为90度，在赤道以南的叫南纬，在赤道以北的叫北纬。北极就是北纬90度，南极就是南纬90度。纬度的高低也标志着气候的冷热，如赤道和低纬度地地区无冬，两极和高纬度地区无夏，中纬度地区四季分明。</p>\n<p>从北极点到南极点，可以画出许多南北方向的与地球赤道垂直的大圆圈，这叫作“经圈”；构成这些圆圈的线段，就叫经线。公元1884平面坐标图年，国际上规定以通过英国伦敦近郊的格林尼治天文台的经线作为计算经度的起点，即经度零度零分零秒，也称“本初子午线”。在它东面的为东经，共180度； </p>\n<h2 id=\"在它西面的为西经，共180度。因为地球是圆的，所以东经180度和西经180度的经线是同一条经线。各国公定180度经线为“国际日期变更线”。为了避免同一地区使用两个不同的日期，国际日期变线在遇陆地时略有偏离。每一经度和纬度还可以再细分为60分，每一分再分为60秒以及秒的小数。利用经纬线，我们就可以确定地球上每一个地方的具体位置，并且把它在地图或地球仪上表示出来。\"><a href=\"#在它西面的为西经，共180度。因为地球是圆的，所以东经180度和西经180度的经线是同一条经线。各国公定180度经线为“国际日期变更线”。为了避免同一地区使用两个不同的日期，国际日期变线在遇陆地时略有偏离。每一经度和纬度还可以再细分为60分，每一分再分为60秒以及秒的小数。利用经纬线，我们就可以确定地球上每一个地方的具体位置，并且把它在地图或地球仪上表示出来。\" class=\"headerlink\" title=\"在它西面的为西经，共180度。因为地球是圆的，所以东经180度和西经180度的经线是同一条经线。各国公定180度经线为“国际日期变更线”。为了避免同一地区使用两个不同的日期，国际日期变线在遇陆地时略有偏离。每一经度和纬度还可以再细分为60分，每一分再分为60秒以及秒的小数。利用经纬线，我们就可以确定地球上每一个地方的具体位置，并且把它在地图或地球仪上表示出来。\"></a>在它西面的为西经，共180度。因为地球是圆的，所以东经180度和西经180度的经线是同一条经线。各国公定180度经线为“国际日期变更线”。为了避免同一地区使用两个不同的日期，国际日期变线在遇陆地时略有偏离。每一经度和纬度还可以再细分为60分，每一分再分为60秒以及秒的小数。利用经纬线，我们就可以确定地球上每一个地方的具体位置，并且把它在地图或地球仪上表示出来。</h2>"},{"title":"Python RE","date":"2017-11-13T09:21:05.000Z","auto_excerpt":{"enable":true,"length":150},"_content":"\n\n### 1.概念：\n\t正则表达式（或 RE）是一种小型的、高度专业化的编程语言，\n      （在Python中）它内嵌在Python中，并通过 re 模块实现。使用这个小型语言，\n       你可以为想要匹配的相应字符串集指定规则；该字符串集可能包含英文语句、email\n       地址、TeX命令或任何你想搞定的东西。然后你可以问诸如“这个字符串匹配\n       该模式吗？”或“在这个字符串中是否有部分匹配该模式呢？”。你也可以使用 RE\n       以各种方式来修改或分割字符串。\n<!--more-->\n\n\t正则表达式语言相对小型和受限（功能有限），因此并非所有字符串处理都能用\n       正则表达式完成。当然也有些任务可以用正则表达式完成，不过最终表达式会变\n       得异常复杂。碰到这些情形时，编写 Python 代码进行处理可能反而更好；尽管\n       Python 代码比一个精巧的正则表达式要慢些，但它更易理解。\n\n### 2.在正则表达式中， 如下的字符是具有特殊含义的\n\t. (所有字符)  ^  $  *(0-N次)  +(1-N次)  ? (0-1次) { } [  ]  \\  |  ( ) \n       1).\"[\" 和 \"]\"。它们常用来指定一个字符类别，所谓字符类别就是你想匹配的一个字符集\n       2).其它地方的\"^\"只会简单匹配 \"^\"字符本身。例[^5] 将匹配除 \"5\" 之外的任意字符。\n       3).反斜杠后面可以加不同的字符以表示不同特殊意义。它也可以用于取消所有的元字符\n\n### 3.RE 函数用法:\n       findall(rule , target [,flag] ) 在目标字符串中查找符合规则的字符串。\n       match() 决定 RE 是否在字符串刚开始的位置匹配\n       search() 扫描字符串，找到这个 RE 匹配的位置\n       findall() 找到 RE 匹配的所有子串，并把它们作为一个列表返回\n       finditer() 找到 RE 匹配的所有子串，并把它们作为一个迭代器返回\n       group() 返回被 RE 匹配的字符串\n       start() 返回匹配开始的位置\n       end() 返回匹配结束的位置\n       span() 返回一个元组包含匹配 (开始,结束) 的位置\n       compile( rule [,flag] )将正则规则编译成一个Pattern对象，以供接下来使用第一个参数   \n\n                                   是规则式，第二个参数是规则选项。(使用compile加速)\n\n### 4 : 含义:\n\t预定义转义字符集： “\\d”  “\\w” “\\s” 等等，它们是以字符’\\’开头，后面接一个特定\n\n字符的形式,用来指示一个预定义好的含义\n```\n\t‘^’  和’$’ 匹配字符串开头和结尾\n\t‘.’    匹配所有字符 除\\n以外\n\t‘\\d’  匹配数字\n\t‘\\D’  匹配非数字\n\t‘\\w’  匹配字母和数字\n\t‘\\W’  匹配非英文字母和数字\n\t‘\\s’   匹配间隔符\n\t‘\\S’   匹配非间隔符\n\t‘\\A’  匹配字符串开头\n\t‘\\Z’  匹配字符串结尾\n\t‘\\b’  只用以匹配单词的词首和词尾。单词被定义为一个字母数字序列，因此词尾就\t\n\n                     是用空白符或非字母数字符来标示的。(退格)\n\t‘\\B’，它正好同 \\b 相反，只在当前位置不在单词边界时匹配。\n```\n### 5.前向界定与后向界定:\n```\n\t‘(?<=…)’ 前向界定:括号中’…’代表你希望匹配的字符串的前面应该出现的字符串。\n\t‘(?=…)’后向界定    :括号中的’…’代表你希望匹配的字符串后面应该出现的字符串\n\t‘(?<!..)’前向非界定 :只有当你希望的字符串前面不是’…’的内容时才匹配\n\t‘(?!...)’后向非界定  :只有当你希望的字符串后面不跟着’…’内容时才匹配。\n```\n### 6.组的基本知识:\n```\n\t‘(‘’)’           无命名组            [a-z]+(\\d+)[a-z]+\n\t‘(?P<name>…)’    命名组                    (?P<g1>[a-z]+)\\d+(?P=g1)\n\t‘(?P=name)’      调用已匹配的命名组\n\t‘\\number’        通过序号调用已匹配的组正则式中的每个组都有一个序号，序号是按组\n\n从左到右，从1开始的数字，你可以通过下面的形式来调用已匹配的组\n( r\"(\\d+)([a-z]+)(\\d+)(\\2)(\\1)\" )   \n```\n","source":"_posts/python-re.md","raw":"---\ntitle: Python RE\ndate: 2017-11-13 17:21:05\ntags:\n- re\n- python\ncategories:\n- python\n\nauto_excerpt:\n  enable: true\n  length: 150\n---\n\n\n### 1.概念：\n\t正则表达式（或 RE）是一种小型的、高度专业化的编程语言，\n      （在Python中）它内嵌在Python中，并通过 re 模块实现。使用这个小型语言，\n       你可以为想要匹配的相应字符串集指定规则；该字符串集可能包含英文语句、email\n       地址、TeX命令或任何你想搞定的东西。然后你可以问诸如“这个字符串匹配\n       该模式吗？”或“在这个字符串中是否有部分匹配该模式呢？”。你也可以使用 RE\n       以各种方式来修改或分割字符串。\n<!--more-->\n\n\t正则表达式语言相对小型和受限（功能有限），因此并非所有字符串处理都能用\n       正则表达式完成。当然也有些任务可以用正则表达式完成，不过最终表达式会变\n       得异常复杂。碰到这些情形时，编写 Python 代码进行处理可能反而更好；尽管\n       Python 代码比一个精巧的正则表达式要慢些，但它更易理解。\n\n### 2.在正则表达式中， 如下的字符是具有特殊含义的\n\t. (所有字符)  ^  $  *(0-N次)  +(1-N次)  ? (0-1次) { } [  ]  \\  |  ( ) \n       1).\"[\" 和 \"]\"。它们常用来指定一个字符类别，所谓字符类别就是你想匹配的一个字符集\n       2).其它地方的\"^\"只会简单匹配 \"^\"字符本身。例[^5] 将匹配除 \"5\" 之外的任意字符。\n       3).反斜杠后面可以加不同的字符以表示不同特殊意义。它也可以用于取消所有的元字符\n\n### 3.RE 函数用法:\n       findall(rule , target [,flag] ) 在目标字符串中查找符合规则的字符串。\n       match() 决定 RE 是否在字符串刚开始的位置匹配\n       search() 扫描字符串，找到这个 RE 匹配的位置\n       findall() 找到 RE 匹配的所有子串，并把它们作为一个列表返回\n       finditer() 找到 RE 匹配的所有子串，并把它们作为一个迭代器返回\n       group() 返回被 RE 匹配的字符串\n       start() 返回匹配开始的位置\n       end() 返回匹配结束的位置\n       span() 返回一个元组包含匹配 (开始,结束) 的位置\n       compile( rule [,flag] )将正则规则编译成一个Pattern对象，以供接下来使用第一个参数   \n\n                                   是规则式，第二个参数是规则选项。(使用compile加速)\n\n### 4 : 含义:\n\t预定义转义字符集： “\\d”  “\\w” “\\s” 等等，它们是以字符’\\’开头，后面接一个特定\n\n字符的形式,用来指示一个预定义好的含义\n```\n\t‘^’  和’$’ 匹配字符串开头和结尾\n\t‘.’    匹配所有字符 除\\n以外\n\t‘\\d’  匹配数字\n\t‘\\D’  匹配非数字\n\t‘\\w’  匹配字母和数字\n\t‘\\W’  匹配非英文字母和数字\n\t‘\\s’   匹配间隔符\n\t‘\\S’   匹配非间隔符\n\t‘\\A’  匹配字符串开头\n\t‘\\Z’  匹配字符串结尾\n\t‘\\b’  只用以匹配单词的词首和词尾。单词被定义为一个字母数字序列，因此词尾就\t\n\n                     是用空白符或非字母数字符来标示的。(退格)\n\t‘\\B’，它正好同 \\b 相反，只在当前位置不在单词边界时匹配。\n```\n### 5.前向界定与后向界定:\n```\n\t‘(?<=…)’ 前向界定:括号中’…’代表你希望匹配的字符串的前面应该出现的字符串。\n\t‘(?=…)’后向界定    :括号中的’…’代表你希望匹配的字符串后面应该出现的字符串\n\t‘(?<!..)’前向非界定 :只有当你希望的字符串前面不是’…’的内容时才匹配\n\t‘(?!...)’后向非界定  :只有当你希望的字符串后面不跟着’…’内容时才匹配。\n```\n### 6.组的基本知识:\n```\n\t‘(‘’)’           无命名组            [a-z]+(\\d+)[a-z]+\n\t‘(?P<name>…)’    命名组                    (?P<g1>[a-z]+)\\d+(?P=g1)\n\t‘(?P=name)’      调用已匹配的命名组\n\t‘\\number’        通过序号调用已匹配的组正则式中的每个组都有一个序号，序号是按组\n\n从左到右，从1开始的数字，你可以通过下面的形式来调用已匹配的组\n( r\"(\\d+)([a-z]+)(\\d+)(\\2)(\\1)\" )   \n```\n","slug":"python-re","published":1,"updated":"2019-06-05T04:37:54.744Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2msmdb9000nm52ewk3unodj","content":"<h3 id=\"1-概念：\"><a href=\"#1-概念：\" class=\"headerlink\" title=\"1.概念：\"></a>1.概念：</h3><pre><code>正则表达式（或 RE）是一种小型的、高度专业化的编程语言，\n  （在Python中）它内嵌在Python中，并通过 re 模块实现。使用这个小型语言，\n   你可以为想要匹配的相应字符串集指定规则；该字符串集可能包含英文语句、email\n   地址、TeX命令或任何你想搞定的东西。然后你可以问诸如“这个字符串匹配\n   该模式吗？”或“在这个字符串中是否有部分匹配该模式呢？”。你也可以使用 RE\n   以各种方式来修改或分割字符串。\n</code></pre><a id=\"more\"></a>\n<pre><code>正则表达式语言相对小型和受限（功能有限），因此并非所有字符串处理都能用\n   正则表达式完成。当然也有些任务可以用正则表达式完成，不过最终表达式会变\n   得异常复杂。碰到这些情形时，编写 Python 代码进行处理可能反而更好；尽管\n   Python 代码比一个精巧的正则表达式要慢些，但它更易理解。\n</code></pre><h3 id=\"2-在正则表达式中，-如下的字符是具有特殊含义的\"><a href=\"#2-在正则表达式中，-如下的字符是具有特殊含义的\" class=\"headerlink\" title=\"2.在正则表达式中， 如下的字符是具有特殊含义的\"></a>2.在正则表达式中， 如下的字符是具有特殊含义的</h3><pre><code>. (所有字符)  ^  $  *(0-N次)  +(1-N次)  ? (0-1次) { } [  ]  \\  |  ( ) \n   1).&quot;[&quot; 和 &quot;]&quot;。它们常用来指定一个字符类别，所谓字符类别就是你想匹配的一个字符集\n   2).其它地方的&quot;^&quot;只会简单匹配 &quot;^&quot;字符本身。例[^5] 将匹配除 &quot;5&quot; 之外的任意字符。\n   3).反斜杠后面可以加不同的字符以表示不同特殊意义。它也可以用于取消所有的元字符\n</code></pre><h3 id=\"3-RE-函数用法\"><a href=\"#3-RE-函数用法\" class=\"headerlink\" title=\"3.RE 函数用法:\"></a>3.RE 函数用法:</h3><pre><code>   findall(rule , target [,flag] ) 在目标字符串中查找符合规则的字符串。\n   match() 决定 RE 是否在字符串刚开始的位置匹配\n   search() 扫描字符串，找到这个 RE 匹配的位置\n   findall() 找到 RE 匹配的所有子串，并把它们作为一个列表返回\n   finditer() 找到 RE 匹配的所有子串，并把它们作为一个迭代器返回\n   group() 返回被 RE 匹配的字符串\n   start() 返回匹配开始的位置\n   end() 返回匹配结束的位置\n   span() 返回一个元组包含匹配 (开始,结束) 的位置\n   compile( rule [,flag] )将正则规则编译成一个Pattern对象，以供接下来使用第一个参数   \n\n                               是规则式，第二个参数是规则选项。(使用compile加速)\n</code></pre><h3 id=\"4-含义\"><a href=\"#4-含义\" class=\"headerlink\" title=\"4 : 含义:\"></a>4 : 含义:</h3><pre><code>预定义转义字符集： “\\d”  “\\w” “\\s” 等等，它们是以字符’\\’开头，后面接一个特定\n</code></pre><p>字符的形式,用来指示一个预定义好的含义</p>\n<pre><code>    ‘^’  和’$’ 匹配字符串开头和结尾\n    ‘.’    匹配所有字符 除\\n以外\n    ‘\\d’  匹配数字\n    ‘\\D’  匹配非数字\n    ‘\\w’  匹配字母和数字\n    ‘\\W’  匹配非英文字母和数字\n    ‘\\s’   匹配间隔符\n    ‘\\S’   匹配非间隔符\n    ‘\\A’  匹配字符串开头\n    ‘\\Z’  匹配字符串结尾\n    ‘\\b’  只用以匹配单词的词首和词尾。单词被定义为一个字母数字序列，因此词尾就    \n\n                     是用空白符或非字母数字符来标示的。(退格)\n    ‘\\B’，它正好同 \\b 相反，只在当前位置不在单词边界时匹配。\n</code></pre><h3 id=\"5-前向界定与后向界定\"><a href=\"#5-前向界定与后向界定\" class=\"headerlink\" title=\"5.前向界定与后向界定:\"></a>5.前向界定与后向界定:</h3><pre><code>    ‘(?&lt;=…)’ 前向界定:括号中’…’代表你希望匹配的字符串的前面应该出现的字符串。\n    ‘(?=…)’后向界定    :括号中的’…’代表你希望匹配的字符串后面应该出现的字符串\n    ‘(?&lt;!..)’前向非界定 :只有当你希望的字符串前面不是’…’的内容时才匹配\n    ‘(?!...)’后向非界定  :只有当你希望的字符串后面不跟着’…’内容时才匹配。\n</code></pre><h3 id=\"6-组的基本知识\"><a href=\"#6-组的基本知识\" class=\"headerlink\" title=\"6.组的基本知识:\"></a>6.组的基本知识:</h3><pre><code>    ‘(‘’)’           无命名组            [a-z]+(\\d+)[a-z]+\n    ‘(?P&lt;name&gt;…)’    命名组                    (?P&lt;g1&gt;[a-z]+)\\d+(?P=g1)\n    ‘(?P=name)’      调用已匹配的命名组\n    ‘\\number’        通过序号调用已匹配的组正则式中的每个组都有一个序号，序号是按组\n\n从左到右，从1开始的数字，你可以通过下面的形式来调用已匹配的组\n( r&quot;(\\d+)([a-z]+)(\\d+)(\\2)(\\1)&quot; )   \n</code></pre>","site":{"data":{}},"excerpt":"<h3 id=\"1-概念：\"><a href=\"#1-概念：\" class=\"headerlink\" title=\"1.概念：\"></a>1.概念：</h3><pre><code>正则表达式（或 RE）是一种小型的、高度专业化的编程语言，\n  （在Python中）它内嵌在Python中，并通过 re 模块实现。使用这个小型语言，\n   你可以为想要匹配的相应字符串集指定规则；该字符串集可能包含英文语句、email\n   地址、TeX命令或任何你想搞定的东西。然后你可以问诸如“这个字符串匹配\n   该模式吗？”或“在这个字符串中是否有部分匹配该模式呢？”。你也可以使用 RE\n   以各种方式来修改或分割字符串。\n</code></pre>","more":"<pre><code>正则表达式语言相对小型和受限（功能有限），因此并非所有字符串处理都能用\n   正则表达式完成。当然也有些任务可以用正则表达式完成，不过最终表达式会变\n   得异常复杂。碰到这些情形时，编写 Python 代码进行处理可能反而更好；尽管\n   Python 代码比一个精巧的正则表达式要慢些，但它更易理解。\n</code></pre><h3 id=\"2-在正则表达式中，-如下的字符是具有特殊含义的\"><a href=\"#2-在正则表达式中，-如下的字符是具有特殊含义的\" class=\"headerlink\" title=\"2.在正则表达式中， 如下的字符是具有特殊含义的\"></a>2.在正则表达式中， 如下的字符是具有特殊含义的</h3><pre><code>. (所有字符)  ^  $  *(0-N次)  +(1-N次)  ? (0-1次) { } [  ]  \\  |  ( ) \n   1).&quot;[&quot; 和 &quot;]&quot;。它们常用来指定一个字符类别，所谓字符类别就是你想匹配的一个字符集\n   2).其它地方的&quot;^&quot;只会简单匹配 &quot;^&quot;字符本身。例[^5] 将匹配除 &quot;5&quot; 之外的任意字符。\n   3).反斜杠后面可以加不同的字符以表示不同特殊意义。它也可以用于取消所有的元字符\n</code></pre><h3 id=\"3-RE-函数用法\"><a href=\"#3-RE-函数用法\" class=\"headerlink\" title=\"3.RE 函数用法:\"></a>3.RE 函数用法:</h3><pre><code>   findall(rule , target [,flag] ) 在目标字符串中查找符合规则的字符串。\n   match() 决定 RE 是否在字符串刚开始的位置匹配\n   search() 扫描字符串，找到这个 RE 匹配的位置\n   findall() 找到 RE 匹配的所有子串，并把它们作为一个列表返回\n   finditer() 找到 RE 匹配的所有子串，并把它们作为一个迭代器返回\n   group() 返回被 RE 匹配的字符串\n   start() 返回匹配开始的位置\n   end() 返回匹配结束的位置\n   span() 返回一个元组包含匹配 (开始,结束) 的位置\n   compile( rule [,flag] )将正则规则编译成一个Pattern对象，以供接下来使用第一个参数   \n\n                               是规则式，第二个参数是规则选项。(使用compile加速)\n</code></pre><h3 id=\"4-含义\"><a href=\"#4-含义\" class=\"headerlink\" title=\"4 : 含义:\"></a>4 : 含义:</h3><pre><code>预定义转义字符集： “\\d”  “\\w” “\\s” 等等，它们是以字符’\\’开头，后面接一个特定\n</code></pre><p>字符的形式,用来指示一个预定义好的含义</p>\n<pre><code>    ‘^’  和’$’ 匹配字符串开头和结尾\n    ‘.’    匹配所有字符 除\\n以外\n    ‘\\d’  匹配数字\n    ‘\\D’  匹配非数字\n    ‘\\w’  匹配字母和数字\n    ‘\\W’  匹配非英文字母和数字\n    ‘\\s’   匹配间隔符\n    ‘\\S’   匹配非间隔符\n    ‘\\A’  匹配字符串开头\n    ‘\\Z’  匹配字符串结尾\n    ‘\\b’  只用以匹配单词的词首和词尾。单词被定义为一个字母数字序列，因此词尾就    \n\n                     是用空白符或非字母数字符来标示的。(退格)\n    ‘\\B’，它正好同 \\b 相反，只在当前位置不在单词边界时匹配。\n</code></pre><h3 id=\"5-前向界定与后向界定\"><a href=\"#5-前向界定与后向界定\" class=\"headerlink\" title=\"5.前向界定与后向界定:\"></a>5.前向界定与后向界定:</h3><pre><code>    ‘(?&lt;=…)’ 前向界定:括号中’…’代表你希望匹配的字符串的前面应该出现的字符串。\n    ‘(?=…)’后向界定    :括号中的’…’代表你希望匹配的字符串后面应该出现的字符串\n    ‘(?&lt;!..)’前向非界定 :只有当你希望的字符串前面不是’…’的内容时才匹配\n    ‘(?!...)’后向非界定  :只有当你希望的字符串后面不跟着’…’内容时才匹配。\n</code></pre><h3 id=\"6-组的基本知识\"><a href=\"#6-组的基本知识\" class=\"headerlink\" title=\"6.组的基本知识:\"></a>6.组的基本知识:</h3><pre><code>    ‘(‘’)’           无命名组            [a-z]+(\\d+)[a-z]+\n    ‘(?P&lt;name&gt;…)’    命名组                    (?P&lt;g1&gt;[a-z]+)\\d+(?P=g1)\n    ‘(?P=name)’      调用已匹配的命名组\n    ‘\\number’        通过序号调用已匹配的组正则式中的每个组都有一个序号，序号是按组\n\n从左到右，从1开始的数字，你可以通过下面的形式来调用已匹配的组\n( r&quot;(\\d+)([a-z]+)(\\d+)(\\2)(\\1)&quot; )   \n</code></pre>"},{"title":"Rabbitmq的web管理界面","date":"2017-11-13T09:21:05.000Z","auto_excerpt":{"enable":true,"length":150},"_content":"\nrabbitmq的web管理界面无法使用guest用户登录\n安装最新版本的rabbitmq(3.3.1)，并启用management plugin后，使用默认的账号guest登陆管理控制台，却提示登陆失败。\n\n翻看官方的release文档后，得知由于账号guest具有所有的操作权限，并且又是默认账号，出于安全因素的考虑，guest用户只能通过localhost登陆使用，并建议修改guest用户的密码以及新建其他账号管理使用rabbitmq(该功能是在3.3.0版本引入的)。\n\n虽然可以以比较猥琐的方式：将ebin目录下rabbit.app中loopback_users里的<<\"guest\">>删除，\n 并重启rabbitmq，可通过任意IP使用guest账号登陆管理控制台，但始终是违背了设计者的初衷，再加上以前对这一块了解也不多，因此有必要总结一下。\n\n<!--more-->\n\n\n1. 用户管理\n\n用户管理包括增加用户，删除用户，查看用户列表，修改用户密码。\n\n相应的命令\n\n(1) 新增一个用户\n\nrabbitmqctl  add_user  Username  Password\n\n(2) 删除一个用户\n\nrabbitmqctl  delete_user  Username\n\n(3) 修改用户的密码\n\nrabbitmqctl  change_password  Username  Newpassword\n\n(4) 查看当前用户列表\n\nrabbitmqctl  list_users\n\n2. 用户角色\n\n按照个人理解，用户角色可分为五类，超级管理员, 监控者, 策略制定者, 普通管理者以及其他。\n\n(1) 超级管理员(administrator)\n\n可登陆管理控制台(启用management plugin的情况下)，可查看所有的信息，并且可以对用户，策略(policy)进行操作。\n\n(2) 监控者(monitoring)\n\n可登陆管理控制台(启用management plugin的情况下)，同时可以查看rabbitmq节点的相关信息(进程数，内存使用情况，磁盘使用情况等)\n\n(3) 策略制定者(policymaker)\n\n可登陆管理控制台(启用management plugin的情况下), 同时可以对policy进行管理。但无法查看节点的相关信息(上图红框标识的部分)。\n\n与administrator的对比，administrator能看到这些内容\n\n(4) 普通管理者(management)\n\n仅可登陆管理控制台(启用management plugin的情况下)，无法看到节点信息，也无法对策略进行管理。\n\n(5) 其他\n\n无法登陆管理控制台，通常就是普通的生产者和消费者。\n\n了解了这些后，就可以根据需要给不同的用户设置不同的角色，以便按需管理。\n\n设置用户角色的命令为：\n\nrabbitmqctl  set_user_tags  User  Tag\n\nUser为用户名， Tag为角色名(对应于上面的administrator，monitoring，policymaker，management，或其他自定义名称)。\n\n也可以给同一用户设置多个角色，例如\n\nrabbitmqctl  set_user_tags  hncscwc  monitoring  policymaker\n\n3. 用户权限\n\n用户权限指的是用户对exchange，queue的操作权限，包括配置权限，读写权限。配置权限会影响到exchange，queue的声明和删除。读写权限影响到从queue里取消息，向exchange发送消息以及queue和exchange的绑定(bind)操作。\n\n例如： 将queue绑定到某exchange上，需要具有queue的可写权限，以及exchange的可读权限；向exchange发送消息需要具有exchange的可写权限；从queue里取数据需要具有queue的可读权限。详细请参考官方文档中\"How permissions work\"部分。\n\n相关命令为：\n\n(1) 设置用户权限\n\nrabbitmqctl  set_permissions  -p  VHostPath  User  ConfP  WriteP  ReadP\n\n(2) 查看(指定hostpath)所有用户的权限信息\n\nrabbitmqctl  list_permissions  [-p  VHostPath]\n\n(3) 查看指定用户的权限信息\n\nrabbitmqctl  list_user_permissions  User\n\n(4)  清除用户的权限信息\n\nrabbitmqctl  clear_permissions  [-p VHostPath]  User\n","source":"_posts/rabbitmq-manager.md","raw":"---\ntitle: Rabbitmq的web管理界面\ndate: 2017-11-13 17:21:05\ntags:\n- rabbitmq\n- amqp\n- queue\ncategories:\n- rabbitmq\n\nauto_excerpt:\n  enable: true\n  length: 150\n---\n\nrabbitmq的web管理界面无法使用guest用户登录\n安装最新版本的rabbitmq(3.3.1)，并启用management plugin后，使用默认的账号guest登陆管理控制台，却提示登陆失败。\n\n翻看官方的release文档后，得知由于账号guest具有所有的操作权限，并且又是默认账号，出于安全因素的考虑，guest用户只能通过localhost登陆使用，并建议修改guest用户的密码以及新建其他账号管理使用rabbitmq(该功能是在3.3.0版本引入的)。\n\n虽然可以以比较猥琐的方式：将ebin目录下rabbit.app中loopback_users里的<<\"guest\">>删除，\n 并重启rabbitmq，可通过任意IP使用guest账号登陆管理控制台，但始终是违背了设计者的初衷，再加上以前对这一块了解也不多，因此有必要总结一下。\n\n<!--more-->\n\n\n1. 用户管理\n\n用户管理包括增加用户，删除用户，查看用户列表，修改用户密码。\n\n相应的命令\n\n(1) 新增一个用户\n\nrabbitmqctl  add_user  Username  Password\n\n(2) 删除一个用户\n\nrabbitmqctl  delete_user  Username\n\n(3) 修改用户的密码\n\nrabbitmqctl  change_password  Username  Newpassword\n\n(4) 查看当前用户列表\n\nrabbitmqctl  list_users\n\n2. 用户角色\n\n按照个人理解，用户角色可分为五类，超级管理员, 监控者, 策略制定者, 普通管理者以及其他。\n\n(1) 超级管理员(administrator)\n\n可登陆管理控制台(启用management plugin的情况下)，可查看所有的信息，并且可以对用户，策略(policy)进行操作。\n\n(2) 监控者(monitoring)\n\n可登陆管理控制台(启用management plugin的情况下)，同时可以查看rabbitmq节点的相关信息(进程数，内存使用情况，磁盘使用情况等)\n\n(3) 策略制定者(policymaker)\n\n可登陆管理控制台(启用management plugin的情况下), 同时可以对policy进行管理。但无法查看节点的相关信息(上图红框标识的部分)。\n\n与administrator的对比，administrator能看到这些内容\n\n(4) 普通管理者(management)\n\n仅可登陆管理控制台(启用management plugin的情况下)，无法看到节点信息，也无法对策略进行管理。\n\n(5) 其他\n\n无法登陆管理控制台，通常就是普通的生产者和消费者。\n\n了解了这些后，就可以根据需要给不同的用户设置不同的角色，以便按需管理。\n\n设置用户角色的命令为：\n\nrabbitmqctl  set_user_tags  User  Tag\n\nUser为用户名， Tag为角色名(对应于上面的administrator，monitoring，policymaker，management，或其他自定义名称)。\n\n也可以给同一用户设置多个角色，例如\n\nrabbitmqctl  set_user_tags  hncscwc  monitoring  policymaker\n\n3. 用户权限\n\n用户权限指的是用户对exchange，queue的操作权限，包括配置权限，读写权限。配置权限会影响到exchange，queue的声明和删除。读写权限影响到从queue里取消息，向exchange发送消息以及queue和exchange的绑定(bind)操作。\n\n例如： 将queue绑定到某exchange上，需要具有queue的可写权限，以及exchange的可读权限；向exchange发送消息需要具有exchange的可写权限；从queue里取数据需要具有queue的可读权限。详细请参考官方文档中\"How permissions work\"部分。\n\n相关命令为：\n\n(1) 设置用户权限\n\nrabbitmqctl  set_permissions  -p  VHostPath  User  ConfP  WriteP  ReadP\n\n(2) 查看(指定hostpath)所有用户的权限信息\n\nrabbitmqctl  list_permissions  [-p  VHostPath]\n\n(3) 查看指定用户的权限信息\n\nrabbitmqctl  list_user_permissions  User\n\n(4)  清除用户的权限信息\n\nrabbitmqctl  clear_permissions  [-p VHostPath]  User\n","slug":"rabbitmq-manager","published":1,"updated":"2019-06-05T04:39:34.536Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck2msmdbb000rm52ehi6ffeab","content":"<p>rabbitmq的web管理界面无法使用guest用户登录<br>安装最新版本的rabbitmq(3.3.1)，并启用management plugin后，使用默认的账号guest登陆管理控制台，却提示登陆失败。</p>\n<p>翻看官方的release文档后，得知由于账号guest具有所有的操作权限，并且又是默认账号，出于安全因素的考虑，guest用户只能通过localhost登陆使用，并建议修改guest用户的密码以及新建其他账号管理使用rabbitmq(该功能是在3.3.0版本引入的)。</p>\n<p>虽然可以以比较猥琐的方式：将ebin目录下rabbit.app中loopback_users里的&lt;&lt;”guest”&gt;&gt;删除，<br> 并重启rabbitmq，可通过任意IP使用guest账号登陆管理控制台，但始终是违背了设计者的初衷，再加上以前对这一块了解也不多，因此有必要总结一下。</p>\n<a id=\"more\"></a>\n<ol>\n<li>用户管理</li>\n</ol>\n<p>用户管理包括增加用户，删除用户，查看用户列表，修改用户密码。</p>\n<p>相应的命令</p>\n<p>(1) 新增一个用户</p>\n<p>rabbitmqctl  add_user  Username  Password</p>\n<p>(2) 删除一个用户</p>\n<p>rabbitmqctl  delete_user  Username</p>\n<p>(3) 修改用户的密码</p>\n<p>rabbitmqctl  change_password  Username  Newpassword</p>\n<p>(4) 查看当前用户列表</p>\n<p>rabbitmqctl  list_users</p>\n<ol start=\"2\">\n<li>用户角色</li>\n</ol>\n<p>按照个人理解，用户角色可分为五类，超级管理员, 监控者, 策略制定者, 普通管理者以及其他。</p>\n<p>(1) 超级管理员(administrator)</p>\n<p>可登陆管理控制台(启用management plugin的情况下)，可查看所有的信息，并且可以对用户，策略(policy)进行操作。</p>\n<p>(2) 监控者(monitoring)</p>\n<p>可登陆管理控制台(启用management plugin的情况下)，同时可以查看rabbitmq节点的相关信息(进程数，内存使用情况，磁盘使用情况等)</p>\n<p>(3) 策略制定者(policymaker)</p>\n<p>可登陆管理控制台(启用management plugin的情况下), 同时可以对policy进行管理。但无法查看节点的相关信息(上图红框标识的部分)。</p>\n<p>与administrator的对比，administrator能看到这些内容</p>\n<p>(4) 普通管理者(management)</p>\n<p>仅可登陆管理控制台(启用management plugin的情况下)，无法看到节点信息，也无法对策略进行管理。</p>\n<p>(5) 其他</p>\n<p>无法登陆管理控制台，通常就是普通的生产者和消费者。</p>\n<p>了解了这些后，就可以根据需要给不同的用户设置不同的角色，以便按需管理。</p>\n<p>设置用户角色的命令为：</p>\n<p>rabbitmqctl  set_user_tags  User  Tag</p>\n<p>User为用户名， Tag为角色名(对应于上面的administrator，monitoring，policymaker，management，或其他自定义名称)。</p>\n<p>也可以给同一用户设置多个角色，例如</p>\n<p>rabbitmqctl  set_user_tags  hncscwc  monitoring  policymaker</p>\n<ol start=\"3\">\n<li>用户权限</li>\n</ol>\n<p>用户权限指的是用户对exchange，queue的操作权限，包括配置权限，读写权限。配置权限会影响到exchange，queue的声明和删除。读写权限影响到从queue里取消息，向exchange发送消息以及queue和exchange的绑定(bind)操作。</p>\n<p>例如： 将queue绑定到某exchange上，需要具有queue的可写权限，以及exchange的可读权限；向exchange发送消息需要具有exchange的可写权限；从queue里取数据需要具有queue的可读权限。详细请参考官方文档中”How permissions work”部分。</p>\n<p>相关命令为：</p>\n<p>(1) 设置用户权限</p>\n<p>rabbitmqctl  set_permissions  -p  VHostPath  User  ConfP  WriteP  ReadP</p>\n<p>(2) 查看(指定hostpath)所有用户的权限信息</p>\n<p>rabbitmqctl  list_permissions  [-p  VHostPath]</p>\n<p>(3) 查看指定用户的权限信息</p>\n<p>rabbitmqctl  list_user_permissions  User</p>\n<p>(4)  清除用户的权限信息</p>\n<p>rabbitmqctl  clear_permissions  [-p VHostPath]  User</p>\n","site":{"data":{}},"excerpt":"<p>rabbitmq的web管理界面无法使用guest用户登录<br>安装最新版本的rabbitmq(3.3.1)，并启用management plugin后，使用默认的账号guest登陆管理控制台，却提示登陆失败。</p>\n<p>翻看官方的release文档后，得知由于账号guest具有所有的操作权限，并且又是默认账号，出于安全因素的考虑，guest用户只能通过localhost登陆使用，并建议修改guest用户的密码以及新建其他账号管理使用rabbitmq(该功能是在3.3.0版本引入的)。</p>\n<p>虽然可以以比较猥琐的方式：将ebin目录下rabbit.app中loopback_users里的&lt;&lt;”guest”&gt;&gt;删除，<br> 并重启rabbitmq，可通过任意IP使用guest账号登陆管理控制台，但始终是违背了设计者的初衷，再加上以前对这一块了解也不多，因此有必要总结一下。</p>","more":"<ol>\n<li>用户管理</li>\n</ol>\n<p>用户管理包括增加用户，删除用户，查看用户列表，修改用户密码。</p>\n<p>相应的命令</p>\n<p>(1) 新增一个用户</p>\n<p>rabbitmqctl  add_user  Username  Password</p>\n<p>(2) 删除一个用户</p>\n<p>rabbitmqctl  delete_user  Username</p>\n<p>(3) 修改用户的密码</p>\n<p>rabbitmqctl  change_password  Username  Newpassword</p>\n<p>(4) 查看当前用户列表</p>\n<p>rabbitmqctl  list_users</p>\n<ol start=\"2\">\n<li>用户角色</li>\n</ol>\n<p>按照个人理解，用户角色可分为五类，超级管理员, 监控者, 策略制定者, 普通管理者以及其他。</p>\n<p>(1) 超级管理员(administrator)</p>\n<p>可登陆管理控制台(启用management plugin的情况下)，可查看所有的信息，并且可以对用户，策略(policy)进行操作。</p>\n<p>(2) 监控者(monitoring)</p>\n<p>可登陆管理控制台(启用management plugin的情况下)，同时可以查看rabbitmq节点的相关信息(进程数，内存使用情况，磁盘使用情况等)</p>\n<p>(3) 策略制定者(policymaker)</p>\n<p>可登陆管理控制台(启用management plugin的情况下), 同时可以对policy进行管理。但无法查看节点的相关信息(上图红框标识的部分)。</p>\n<p>与administrator的对比，administrator能看到这些内容</p>\n<p>(4) 普通管理者(management)</p>\n<p>仅可登陆管理控制台(启用management plugin的情况下)，无法看到节点信息，也无法对策略进行管理。</p>\n<p>(5) 其他</p>\n<p>无法登陆管理控制台，通常就是普通的生产者和消费者。</p>\n<p>了解了这些后，就可以根据需要给不同的用户设置不同的角色，以便按需管理。</p>\n<p>设置用户角色的命令为：</p>\n<p>rabbitmqctl  set_user_tags  User  Tag</p>\n<p>User为用户名， Tag为角色名(对应于上面的administrator，monitoring，policymaker，management，或其他自定义名称)。</p>\n<p>也可以给同一用户设置多个角色，例如</p>\n<p>rabbitmqctl  set_user_tags  hncscwc  monitoring  policymaker</p>\n<ol start=\"3\">\n<li>用户权限</li>\n</ol>\n<p>用户权限指的是用户对exchange，queue的操作权限，包括配置权限，读写权限。配置权限会影响到exchange，queue的声明和删除。读写权限影响到从queue里取消息，向exchange发送消息以及queue和exchange的绑定(bind)操作。</p>\n<p>例如： 将queue绑定到某exchange上，需要具有queue的可写权限，以及exchange的可读权限；向exchange发送消息需要具有exchange的可写权限；从queue里取数据需要具有queue的可读权限。详细请参考官方文档中”How permissions work”部分。</p>\n<p>相关命令为：</p>\n<p>(1) 设置用户权限</p>\n<p>rabbitmqctl  set_permissions  -p  VHostPath  User  ConfP  WriteP  ReadP</p>\n<p>(2) 查看(指定hostpath)所有用户的权限信息</p>\n<p>rabbitmqctl  list_permissions  [-p  VHostPath]</p>\n<p>(3) 查看指定用户的权限信息</p>\n<p>rabbitmqctl  list_user_permissions  User</p>\n<p>(4)  清除用户的权限信息</p>\n<p>rabbitmqctl  clear_permissions  [-p VHostPath]  User</p>"},{"title":"go-请求转发","date":"2020-05-08T03:30:57.000Z","_content":"\n# golang 转发 http 请求\n\n\n```golang\n\npackage main\n\nimport (\n\t\"log\"\n\t\"net/http\"\n\t\"net/http/httputil\"\n\t\"net/url\"\n)\n\n//将request转发给 http://127.0.0.1:2003\nfunc proxyHandler(w http.ResponseWriter, r *http.Request) {\n\n\ttrueServer := \"http://127.0.0.1:15672\"\n\n\turl, err := url.Parse(trueServer)\n\tif err != nil {\n\t\tlog.Println(err)\n\t\treturn\n\t}\n\n\tproxy := httputil.NewSingleHostReverseProxy(url)\n\tproxy.ServeHTTP(w, r)\n\n}\n\nfunc main() {\n\thttp.HandleFunc(\"/\", proxyHandler)\n\tlog.Fatal(http.ListenAndServe(\":2002\", nil))\n}\n\n\n```\n","source":"_posts/go-proxy.md","raw":"---\ntitle: go-请求转发\ndate: 2020-05-08 11:30:57\ntags: \n- go\ncategories:\n- go\n---\n\n# golang 转发 http 请求\n\n\n```golang\n\npackage main\n\nimport (\n\t\"log\"\n\t\"net/http\"\n\t\"net/http/httputil\"\n\t\"net/url\"\n)\n\n//将request转发给 http://127.0.0.1:2003\nfunc proxyHandler(w http.ResponseWriter, r *http.Request) {\n\n\ttrueServer := \"http://127.0.0.1:15672\"\n\n\turl, err := url.Parse(trueServer)\n\tif err != nil {\n\t\tlog.Println(err)\n\t\treturn\n\t}\n\n\tproxy := httputil.NewSingleHostReverseProxy(url)\n\tproxy.ServeHTTP(w, r)\n\n}\n\nfunc main() {\n\thttp.HandleFunc(\"/\", proxyHandler)\n\tlog.Fatal(http.ListenAndServe(\":2002\", nil))\n}\n\n\n```\n","slug":"go-proxy","published":1,"updated":"2020-05-08T03:47:07.681Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9xnsqel00008z2ermyxu2qi","content":"<h1 id=\"golang-转发-http-请求\"><a href=\"#golang-转发-http-请求\" class=\"headerlink\" title=\"golang 转发 http 请求\"></a>golang 转发 http 请求</h1><pre><code class=\"golang\">\npackage main\n\nimport (\n    &quot;log&quot;\n    &quot;net/http&quot;\n    &quot;net/http/httputil&quot;\n    &quot;net/url&quot;\n)\n\n//将request转发给 http://127.0.0.1:2003\nfunc proxyHandler(w http.ResponseWriter, r *http.Request) {\n\n    trueServer := &quot;http://127.0.0.1:15672&quot;\n\n    url, err := url.Parse(trueServer)\n    if err != nil {\n        log.Println(err)\n        return\n    }\n\n    proxy := httputil.NewSingleHostReverseProxy(url)\n    proxy.ServeHTTP(w, r)\n\n}\n\nfunc main() {\n    http.HandleFunc(&quot;/&quot;, proxyHandler)\n    log.Fatal(http.ListenAndServe(&quot;:2002&quot;, nil))\n}\n\n\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"golang-转发-http-请求\"><a href=\"#golang-转发-http-请求\" class=\"headerlink\" title=\"golang 转发 http 请求\"></a>golang 转发 http 请求</h1><pre><code class=\"golang\">\npackage main\n\nimport (\n    &quot;log&quot;\n    &quot;net/http&quot;\n    &quot;net/http/httputil&quot;\n    &quot;net/url&quot;\n)\n\n//将request转发给 http://127.0.0.1:2003\nfunc proxyHandler(w http.ResponseWriter, r *http.Request) {\n\n    trueServer := &quot;http://127.0.0.1:15672&quot;\n\n    url, err := url.Parse(trueServer)\n    if err != nil {\n        log.Println(err)\n        return\n    }\n\n    proxy := httputil.NewSingleHostReverseProxy(url)\n    proxy.ServeHTTP(w, r)\n\n}\n\nfunc main() {\n    http.HandleFunc(&quot;/&quot;, proxyHandler)\n    log.Fatal(http.ListenAndServe(&quot;:2002&quot;, nil))\n}\n\n\n</code></pre>\n"},{"title":"go-proxy","date":"2020-05-08T03:30:57.000Z","_content":"\n# golang http 代理\n\n```golang\n\npackage main\n\nimport (\n    \"github.com/elazarl/goproxy\"\n    \"log\"\n    \"net/http\"\n)\n\nfunc main() {\n    proxy := goproxy.NewProxyHttpServer()\n    proxy.Verbose = true\n    log.Fatal(http.ListenAndServe(\":9999\", proxy))\n}\n\n\n```\n","source":"_posts/go-代理.md","raw":"---\ntitle: go-proxy\ndate: 2020-05-08 11:30:57\ntags: \n- go\ncategories:\n- go\n---\n\n# golang http 代理\n\n```golang\n\npackage main\n\nimport (\n    \"github.com/elazarl/goproxy\"\n    \"log\"\n    \"net/http\"\n)\n\nfunc main() {\n    proxy := goproxy.NewProxyHttpServer()\n    proxy.Verbose = true\n    log.Fatal(http.ListenAndServe(\":9999\", proxy))\n}\n\n\n```\n","slug":"go-代理","published":1,"updated":"2020-05-08T03:47:39.301Z","comments":1,"layout":"post","photos":[],"link":"","_id":"ck9xnsqet00018z2e6alrfpqz","content":"<h1 id=\"golang-http-代理\"><a href=\"#golang-http-代理\" class=\"headerlink\" title=\"golang http 代理\"></a>golang http 代理</h1><pre><code class=\"golang\">\npackage main\n\nimport (\n    &quot;github.com/elazarl/goproxy&quot;\n    &quot;log&quot;\n    &quot;net/http&quot;\n)\n\nfunc main() {\n    proxy := goproxy.NewProxyHttpServer()\n    proxy.Verbose = true\n    log.Fatal(http.ListenAndServe(&quot;:9999&quot;, proxy))\n}\n\n\n</code></pre>\n","site":{"data":{}},"excerpt":"","more":"<h1 id=\"golang-http-代理\"><a href=\"#golang-http-代理\" class=\"headerlink\" title=\"golang http 代理\"></a>golang http 代理</h1><pre><code class=\"golang\">\npackage main\n\nimport (\n    &quot;github.com/elazarl/goproxy&quot;\n    &quot;log&quot;\n    &quot;net/http&quot;\n)\n\nfunc main() {\n    proxy := goproxy.NewProxyHttpServer()\n    proxy.Verbose = true\n    log.Fatal(http.ListenAndServe(&quot;:9999&quot;, proxy))\n}\n\n\n</code></pre>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"ck2msmdak0000m52exl6c0ax5","category_id":"ck2msmdar0002m52e7p6bm2b8","_id":"ck2msmdb3000cm52eezqm2e1z"},{"post_id":"ck2msmdap0001m52eafwqbi0w","category_id":"ck2msmdb00007m52ee3x1gktc","_id":"ck2msmdb6000im52eh9qfoaas"},{"post_id":"ck2msmdat0004m52e7sl21jt6","category_id":"ck2msmdb4000dm52e8pkn54ns","_id":"ck2msmdba000pm52ejc6s4xvp"},{"post_id":"ck2msmdb6000hm52e0m14ii9n","category_id":"ck2msmdb00007m52ee3x1gktc","_id":"ck2msmdbb000sm52epqma7lgo"},{"post_id":"ck2msmdau0005m52esmpokc7k","category_id":"ck2msmdb4000dm52e8pkn54ns","_id":"ck2msmdbd000um52evl88w98n"},{"post_id":"ck2msmdbb000rm52ehi6ffeab","category_id":"ck2msmdar0002m52e7p6bm2b8","_id":"ck2msmdbe000wm52e25fcrlx4"},{"post_id":"ck2msmday0006m52edqcuayz3","category_id":"ck2msmdb4000dm52e8pkn54ns","_id":"ck2msmdbe000ym52ekuf4n91q"},{"post_id":"ck2msmdb1000am52efnadyah2","category_id":"ck2msmdb4000dm52e8pkn54ns","_id":"ck2msmdbg0011m52e3hmqbxjv"},{"post_id":"ck2msmdb2000bm52ezb28es9s","category_id":"ck2msmdb4000dm52e8pkn54ns","_id":"ck2msmdbj0014m52es3mfm1y7"},{"post_id":"ck2msmdb5000fm52edfwamu3o","category_id":"ck2msmdbf0010m52e02g4ivif","_id":"ck2msmdbk0019m52es8hv9vyf"},{"post_id":"ck2msmdb8000lm52eucbstias","category_id":"ck2msmdbj0015m52ecbm3nm37","_id":"ck2msmdbm001em52e3za6ulub"},{"post_id":"ck2msmdb9000nm52ewk3unodj","category_id":"ck2msmdbk001am52ectxm5nc6","_id":"ck2msmdbn001im52e82unxhf3"},{"post_id":"ck9xnsqel00008z2ermyxu2qi","category_id":"ck2msmdb4000dm52e8pkn54ns","_id":"ck9xnsqew00048z2ee280gpaa"},{"post_id":"ck9xnsqet00018z2e6alrfpqz","category_id":"ck2msmdb4000dm52e8pkn54ns","_id":"ck9xnsqew00058z2eceby4dku"}],"PostTag":[{"post_id":"ck2msmdak0000m52exl6c0ax5","tag_id":"ck2msmdat0003m52esbeyduvi","_id":"ck2msmdb10009m52e0eijgkxp"},{"post_id":"ck2msmdap0001m52eafwqbi0w","tag_id":"ck2msmdb00008m52e4ahqznrd","_id":"ck2msmdb6000gm52e95enyekg"},{"post_id":"ck2msmdat0004m52e7sl21jt6","tag_id":"ck2msmdb4000em52ek2ld81gn","_id":"ck2msmdb9000mm52e3ua9avgv"},{"post_id":"ck2msmdau0005m52esmpokc7k","tag_id":"ck2msmdb4000em52ek2ld81gn","_id":"ck2msmdbj0013m52e7uzy92wb"},{"post_id":"ck2msmdau0005m52esmpokc7k","tag_id":"ck2msmdba000qm52e8lt8o067","_id":"ck2msmdbj0016m52e8wncwl4r"},{"post_id":"ck2msmdau0005m52esmpokc7k","tag_id":"ck2msmdbe000vm52e75rwkxij","_id":"ck2msmdbk0018m52e9r1jq8hv"},{"post_id":"ck2msmdau0005m52esmpokc7k","tag_id":"ck2msmdbe000zm52exbya3m1f","_id":"ck2msmdbk001bm52esshzf3bz"},{"post_id":"ck2msmday0006m52edqcuayz3","tag_id":"ck2msmdb4000em52ek2ld81gn","_id":"ck2msmdbl001dm52ek5hlw10b"},{"post_id":"ck2msmdb1000am52efnadyah2","tag_id":"ck2msmdb4000em52ek2ld81gn","_id":"ck2msmdbm001fm52e8etvgekw"},{"post_id":"ck2msmdb2000bm52ezb28es9s","tag_id":"ck2msmdb4000em52ek2ld81gn","_id":"ck2msmdbn001hm52ei1yabgzh"},{"post_id":"ck2msmdb5000fm52edfwamu3o","tag_id":"ck2msmdbm001gm52ec6r8hfwn","_id":"ck2msmdbo001lm52eiurwmkde"},{"post_id":"ck2msmdb5000fm52edfwamu3o","tag_id":"ck2msmdbo001jm52e8dthdnes","_id":"ck2msmdbp001mm52epx4s1l9o"},{"post_id":"ck2msmdb6000hm52e0m14ii9n","tag_id":"ck2msmdb00008m52e4ahqznrd","_id":"ck2msmdbp001om52enydfqv1o"},{"post_id":"ck2msmdb6000hm52e0m14ii9n","tag_id":"ck2msmdbo001km52e7tj6o6ef","_id":"ck2msmdbp001pm52eozin11tt"},{"post_id":"ck2msmdb8000lm52eucbstias","tag_id":"ck2msmdbp001nm52epfndoz8a","_id":"ck2msmdbp001rm52etqqchm2i"},{"post_id":"ck2msmdb9000nm52ewk3unodj","tag_id":"ck2msmdbp001qm52eo2lw8e76","_id":"ck2msmdbr001um52esayfmvf6"},{"post_id":"ck2msmdb9000nm52ewk3unodj","tag_id":"ck2msmdbq001sm52euvm1p3s5","_id":"ck2msmdbr001vm52ehmi5oe1c"},{"post_id":"ck2msmdbb000rm52ehi6ffeab","tag_id":"ck2msmdat0003m52esbeyduvi","_id":"ck2msmdbt001xm52ew6elqccu"},{"post_id":"ck2msmdbb000rm52ehi6ffeab","tag_id":"ck2msmdbq001tm52edea7qp0t","_id":"ck2msmdbt001ym52ekc9ca49p"},{"post_id":"ck2msmdbb000rm52ehi6ffeab","tag_id":"ck2msmdbr001wm52eanip4nx2","_id":"ck2msmdbt001zm52enecb8txq"},{"post_id":"ck9xnsqel00008z2ermyxu2qi","tag_id":"ck2msmdb4000em52ek2ld81gn","_id":"ck9xnsqev00028z2eb08n1jd0"},{"post_id":"ck9xnsqet00018z2e6alrfpqz","tag_id":"ck2msmdb4000em52ek2ld81gn","_id":"ck9xnsqev00038z2elfwsfu2t"}],"Tag":[{"name":"rabbitmq","_id":"ck2msmdat0003m52esbeyduvi"},{"name":"docs","_id":"ck2msmdb00008m52e4ahqznrd"},{"name":"go","_id":"ck2msmdb4000em52ek2ld81gn"},{"name":"golang","_id":"ck2msmdba000qm52e8lt8o067"},{"name":"go-micro","_id":"ck2msmdbe000vm52e75rwkxij"},{"name":"注意事项","_id":"ck2msmdbe000zm52exbya3m1f"},{"name":"http","_id":"ck2msmdbm001gm52ec6r8hfwn"},{"name":"web","_id":"ck2msmdbo001jm52e8dthdnes"},{"name":"markdown","_id":"ck2msmdbo001km52e7tj6o6ef"},{"name":"mysql","_id":"ck2msmdbp001nm52epfndoz8a"},{"name":"re","_id":"ck2msmdbp001qm52eo2lw8e76"},{"name":"python","_id":"ck2msmdbq001sm52euvm1p3s5"},{"name":"amqp","_id":"ck2msmdbq001tm52edea7qp0t"},{"name":"queue","_id":"ck2msmdbr001wm52eanip4nx2"}]}}